[{"content":"Welcome to the second blog post in this blogging series. I recommend reading the introduction post before starting with this one. Email is one of the oldest ways to communicate on the world wide web. And since the internet was created with openness in mind, so it shouldn\u0026rsquo;t come as a surprise that e-mail wasn\u0026rsquo;t designed to be very secure. Sending an e-mail is like sending a postcard. Every party involved in the delivery process can read the contents of the message. From the people working in the distribution centers to the mailman who delivers the card to your door.\nThe solution to this problem is to encrypt your e-mail. This makes the mail unreadable to anyone who is not in possession of the decryption key. You and the recipient(s) of your message will need to install the proper encryption software to handle the encryption and decryption operations. The most popular encryption software choices are OpenPGP and SSL/TLS. I will discuss both choices in the following two sections.\nSSL/TLS Secure Sockets Layer (SSL) and its successor Transport Layer Security (TLS) are encryption protocols. I won\u0026rsquo;t bore you too much with the technical details, but there is one thing I want to highlight here. It\u0026rsquo;s not the way the protocol can encrypt and decrypt a message, but the way the sender and receiver of the message can be verified. You see, encryption is fine and all, but it has limited use when there are no guarantees that the recipient of the message is actually the intended recipient. And how can the recipient verify that the message actually came from the listed sender?\nLet\u0026rsquo;s clarify this problem with a real-world example. In most counties, you are only allowed to drive a car after passing the driving test. Passing the test shows that you have the knowledge and skill to safely drive a car. But how can a police officer verify that you have passed the test? A police officer cannot trust everyone on their word. People can lie after all. The government therefore gives everyone who passes the test a plastic card which acts as proof of their accomplishment. We call his card a driving license.\nWhenever you get pulled over by the police, you can present the officer with your license. The officer might not trust you as an individual, but they will trust the government. There can even be more complex trust relationships. You might get pulled over when on vacation in another country. The police officer does not trust you as a person, but they do trust the authority of their own government, which in turn trusts your own government, which trusts your ability to drive a car.\nSSL and TLS have a similar solution to this problem. There are certificate authorities that can create and distribute certificates to those who need them. A company can act like a certificate authority and provide certificates for all its employees. The employees can use these certificates to verify the identity of each other.\nThe company can also create a trust relationship with a commercial certificate authority, allowing the employees to prove their identity to people outside the company like their customers. This concept is called a \u0026ldquo;chain of trust\u0026rdquo;. Everyone trusts the commercial certificate authority, the authority trusts the company and the company trusts its employees.\nThe most popular application for doing everything SSL and TLS related is OpenSSL, but there are also alternative solutions such as LibreSSL, GnuTLS and WolfSSL.\nWarning\nIt\u0026rsquo;s important to know how the terms SSL and TLS are used. As previously said: TLS is the successor to SSL, but people also use both terms interchangeably. The SSL protocol has been deprecated and should not be used in production environments. So when someone uses the term SSL, they are probably referring to TLS. We nerds don\u0026rsquo;t like change too much and simply keep using the term SSL, even when the name was changed to TLS. I will just use the term TLS from now on.\nWarning\nYou might stumble on to the term \u0026ldquo;S/MIME\u0026rdquo; when doing your own research into mail encryption. S/MIME stands for Secure/Multipurpose Internet Mail Extensions and is a standard for encrypting and singing e-mail messages (MIME data). S/MIME does not do any encryption in and of itself, it simply describes how the encrypted data should be packaged and presented to the receiver of the message. OpenPGP has its own standard for this called OpenPGP/MIME.\nI decided to use the term \u0026ldquo;TLS\u0026rdquo; because I wanted to focus on the tools that actually do the encryption and signing operations.\nInfo\nThe cost of certificates can highly differ depending on what your situation is. These are the things you need to think about:\nCertificates come with different assurance levels (also known as classes). There is usually a lower assurance level where only the e-mail address is verified and a higher level where information about the business is also verified. You can get a lower class certificate for around € 20 to € 100 a year (for personal use). A higher one will cost you around a € 50 to € 400 (for business use). Think about how you are going to manage these certificates. Each newly onboarded employee will need their own certificate and you will need to revoke the certificate of every off-boarded employee. Issued certificates will also need to be renewed after a period of 1 to 3 years. OpenPGP PGP stands for Pretty Good Privacy and is the name of an encryption application developed by Phil Zimmermann in the 90s. OpenPGP is an open standard of PGP. This open standard allows others to make their own implementation of PGP. GNU Privacy Guard (abbreviated as GPG or GnuPG) is such an implementation. This application allows you, just like with OpenSSL, to encrypt and decrypt data. One of the biggest differences between TLS and OpenPGP is the way they handle trust relationships.\nTLS works with certificate authorities, creating a chain of trust. The authorities take care of all the complex procedures. You provide them with the necessary information and pay them a fee for their services. The authority will review and confirm the validity of the information and provide you with some kind of proof of identity if everything checks out. But what happens when the authority refuses to give you this proof? There are enough people in this world who cannot leave their county, because their government refuses to provide them with a passport and you can\u0026rsquo;t cross the border without one.\nOpenPGP makes no use of central authorities. Its users create trust relations between themselves instead. It uses a web of trust instead of a chain of trust. Each user starts with creating a key pair. Each key pair consist out of a public and private key. One key is used to encrypt a message and the other is used to decrypt a previously encrypted message. We call this asymmetric encryption since different keys are used for the encryption and decryption process.\nApart from the key material itself, the public key file also contains information like first- and last name, e-mail address and can even contain a picture of its owner. This public key acts as the user\u0026rsquo;s proof of identity. It\u0026rsquo;s then up to the user to get their key certified by other people. These people can be friends, colleagues or other acquaintances. And let\u0026rsquo;s not forget that this user can also certify the public key of others by using their own private key. This system always reminds me of an advertisement strategy we Dutch people call \u0026ldquo;Mond tot mond reclame\u0026rdquo; which translates to: \u0026ldquo;Mouth to mouth advertising\u0026rdquo; (I believe this is revered to as \u0026ldquo;Word of mouth\u0026rdquo; in the English language).\nIf you are a business owner and deliver a proper product or service to your customers, those customers will recommend your business to their friends. Those friends will then pass the message along and will give the same recommendation to their friends, creating an ever-increasing web of potential customers.\nWhy is nobody using this? You might be thinking: \u0026ldquo;Nice story and cool software, but I don\u0026rsquo;t know anyone in my circle of friends who is actually using this nor have I heard any mention about these solutions before\u0026rdquo;. This is a valid point. Both TLS and OpenPGP have some major drawbacks preventing them from being used on a wide scale for e-mail encryption. TLS is the most user-friendly since most modern e-mail clients such as Outlook, Apple Mail and Thunderbird support it out of the box. The Certificate Authority will also do most of the heavy lifting for you, but they expect to be paid for their services.\nA normal user is not going to pay 40 euro\u0026rsquo;s a year to get a nice checkmark behind their name. TLS is therefore more popular in corporate environments. Businesses either manage their own certificate authority or let a third party handle this task for them.\nInfo\nMost e-mail applications will display a checkmark behind the sender\u0026rsquo;s name when the e-mail is digitally signed and successfully verified. Clicking on this checkmark will display some technical information about the sender\u0026rsquo;s certificate. Here you can see how this looks in Apple Mail on iPadOS:\nThe interface language is in Dutch, but you should still be able to make out some information such as my name (Valentijn Harmers), the name of my employer (NCC Group) and the name of the Certificate Authority who provided the certificate (Entrust, Inc).\nSo TLS is too pricy for non-business users, what about OpenPGP? The software for using OpenPGP is free of charge and it is not customary for users in the web of trust to ask for money in exchange for certifying your key. The problem with OpenPGP lies in its complexity. It puts a lot of responsibility and complexity on the shoulders of its end users. This is too much to ask of your everyday user. It\u0026rsquo;s therefore only used by geeks and maybe some journalists. There are some graphical interfaces that take away some of the complexity, but it is still a difficult tool to use properly.\nPutting things into practice Let\u0026rsquo;s leave the theoretical part of this post behind and do something practical. I am going to show you how to use OpenPGP. We are going to generate a key pair and do some stuff with it. Ensure that you have followed the steps in the Introduction post before proceeding with this one.\nInstalling the software We need an application that implements the OpenPGP standard. GnuPG is the best choice. Open up a terminal/Powershell window and type the appropriate command for your system:\nbrew install gpg pinentry-mac # macOS apt install gnupg # Debian/Ubuntu dnf install gnupg2 # Fedora choco install gpg4win # Windows Configuring your system We will need to do some configuration steps before we can proceed with the key pair generation.\nPinentry configuration on macOS Configure GPG to use the pinentry-mac program for entering passwords on a macOS system. This program is preferred over the default pinentry program which is shipped with gpg.\necho \u0026#34;pinentry-program /usr/local/bin/pinentry-mac\u0026#34; \u0026gt;\u0026gt; ~/.gnupg/gpg-agent.conf gpgconf --kill gpg-agent Set the GPG_TTY environment variable on Linux and macOS You will need to set and export the GPG_TTY environment variable for the GPG agent on Linux (Debain/Ubuntu/Fedora) and macOS systems:\nGPG_TTY=$(tty) export GPG_TTY It\u0026rsquo;s best to add these lines to the startup script of your shell. Choose the right command for the shell you are using:\n# Bash shell echo \u0026#39;export GPG_TTY=$(tty)\u0026#39; \u0026gt;\u0026gt; ~/.bashrc # Zsh shell echo \u0026#39;export GPG_TTY=$(tty)\u0026#39; \u0026gt;\u0026gt; ~/.zshrc # Fish shell echo \u0026#39;set -gx GPG_TTY (tty)\u0026#39; \u0026gt;\u0026gt; ~/.config/fish/config.fish Info\nBash is the default shell on most Linux systems. Zsh is the default shell on macOS. You can figure out which shell you are using by running the following command echo \u0026quot;$SHELL\u0026quot;\nThis will make sure that the prompt for password entry is displayed in the proper terminal window.\nEnable SSH support for the GPG agent on Linux and macOS (optional) The GPG agent allows you to use your GPG authorization key for SSH access. You can skip this step if you are not interested in using your key for SSH authentication. Follow the following steps to enable it:\nStep 1: Enable SSH support in the agent configuration file:\necho \u0026#39;enable-ssh-support\u0026#39; \u0026gt;\u0026gt; ~/.gnupg/gpg-agent.conf Step 2: Configure SSH to use the GPG agent for authentication:\n# Bash shell echo \u0026#39;export SSH_AUTH_SOCK ~/.gnupg/S.gpg-agent.ssh\u0026#39; \u0026gt;\u0026gt; ~/.bashrc # zsh shell echo \u0026#39;export SSH_AUTH_SOCK ~/.gnupg/S.gpg-agent.ssh\u0026#39; \u0026gt;\u0026gt; ~/.zshrc # Fish shell echo \u0026#39;set -gx SSH_AUTH_SOCK ~/.gnupg/S.gpg-agent.ssh\u0026#39; \u0026gt;\u0026gt; ~/.config/fish/config.fish Step 3: Restart the agent:\ngpgconf --kill gpg-agent gpgconf --launch gpg-agent Step 4: Close and reopen your terminal. The configured environment variables should now be set (you can check this by running the env command)\nWarning\nThese steps will only work on Linux and macOS systems. Windows users often use applications such as Putty or Kitty to establish SSH connections to Linux servers. I don\u0026rsquo;t know if this kind of setup is possible with these kind of applications.\nGenerating keys Now it\u0026rsquo;s time to generate our key pair.\nStep 1: First you will have to generate your master key. The code block below shows the command you need to run in your terminal on the first line. The rest of the lines show the answers to the questions the gpg application will ask. Replace the answers to the \u0026lsquo;Real name\u0026rsquo;, \u0026lsquo;Email address\u0026rsquo; and \u0026lsquo;Comment\u0026rsquo; questions with your own information.\ngpg --full-generate-key Your selection? 4 What keysize do you want? (3072) 4096 Key is valid for? (0) 6y Is this correct? (y/N) y Real name: John Doe Email address: john.doe@example.com Comment: John\u0026#39;s key Info\nJust like a driver license or passport, a key pair has an expiration date. You are free to choose this date during the creation of your key. The key generated in the code block above, is valid for 6 years. You will have to create a new master key when the old key is about to expire.\nStep 2: Verify the key has been created and note down its ID:\ngpg -K --keyid-format 0xshort /home/john/.gnupg/pubring.kbx ---------------------------------- sec rsa4096/0xFC1B1408 2022-07-07 [SC] [expires: 2028-07-05] 26B6896326F977B6FA0DBE4B1D047E24FC1B1408 uid [ultimate] John Doe (John\u0026#39;s key) \u0026lt;john.doe@example.com\u0026gt; The code block above shows the command to display the key information. It also shows example output. The key ID in this example is 26B6896326F977B6FA0DBE4B1D047E24FC1B1408 and its short version is 0xFC1B1408. Your own ID will look different. Ensure that you replace 0xFC1B1408 with your own ID in the next steps.\nInfo\nThe created master key allows you to do 2 things:\nCertify other keys. This allows you to create trust relationships with others Digitally sign any file or piece of text Step 3: Add an encryption subkey to your master key:\ngpg --edit-key 0xFC1B1408 gpg\u0026gt; addkey Your selection? 6 Key is valid for? (0) 2y Is this correct? (y/N) y Really create? (y/N) y gpg\u0026gt; save Info\nIt is best practice to create separate key material for signing and encryption purposes. The encryption key can have a shorter expiration date than the master key and can be easily rotated.\nStep 4 (optional): Create a subkey for authentication. You can skip this step if you are not planning to use GPG for SSH access:\ngpg --expert --edit-key 0xFC1B1408 gpg\u0026gt; addkey Your selection? 8 Your selection? A Your selection? S Your selection? E Your selection? Q Key is valid for? (0) 2y Is this correct? (y/N) y Really create? (y/N) y gpg\u0026gt; save Step 5 (optional): Backup your keys. The following command will create backup files in the current working directory:\ngpg --armor --output private.asc --export-secret-key 0xFC1B1408 gpg --armor --output sub_private.asc --export-secret-subkeys 0xFC1B1408 gpg --armor --output public.asc --export 0xFC1B1408 Move these files to a save place. It is recommended to move then to removable storage like a USB stick or CD/DVD. You can also print the keys to paper since they contain plaintext characters.\nStep 6 (optional): Save your public SSH key if you created an authentication key and enabled SSH support:\nssh-add -L \u0026gt; id_rsa.pub You can then copy the contents of the id_rsa.pub file to the systems you need access to.\nCreating trust relationships In order verify signatures or encrypt messages, you will need to import, trust and sign the public keys of others.\nStep 1: Import the key of the person you want to create a trust relationship with. You can import from a file of paste the key directly in to your terminal:\n# Import from file gpg --import public.asc # Paste directly into terminal gpg --import # Then just paste the key and hit the ctrl+d key combo on your keyboard Step 2: Open an edit shell for the newly imported key:\ngpg --edit-key 0x12345678 Replace 0x12345678 with the key id of the imported key from step 1. You can list all key id\u0026rsquo;s with: gpg -k --keyid-format 0xshort.\nStep 2.1: Trust the key:\ngpg\u0026gt; trust # Please decide how far you trust this user to correctly verify other users\u0026#39; keys # (by looking at passports, checking fingerprints from different sources, etc.) # # 1 = I don\u0026#39;t know or won\u0026#39;t say # 2 = I do NOT trust # 3 = I trust marginally # 4 = I trust fully # 5 = I trust ultimately # m = back to the main menu # Your decision? 3 Feel free to make a different decision based on your own preference.\nWarning\nEnsure you know that is meant by trust. You don\u0026rsquo;t decide how far you trust the owner of the key in general. You decide how far you trust the owner to correctly verify the keys of other users.\nStep 2.2: Sign the key with your own key using the lsign or sign command. The following example uses the sign command:\ngpg\u0026gt; sign Really sign? (y/N) y Info\nThe lsign (local sign) command will only keep the generated signature locally. The signature will never be exported or uploaded to a key server. This is handy for when you want to communicate with someone, but do not want to vouch for them in public.\nStep 2.3: Use the save command to save the made changes and close the shell.\nStep 3 (optionally): Share your key signature with the user of the imported key:\ngpg --armor --output public.asc --export 0x12345678 Replace 0x12345678 with the key id of the imported key from step 1. The exported key will include your signature. The owner of the key can then import the updated key in their own keyring.\nInfo\nThe process of transferring, importing and exporting key files can be quite the hassle. You can simplify the process by using a key server. I will explain how to use such a key server in a later section in this blog post.\nUsing your key to sign stuff You can use your key to sign a piece of text or file. Signing provides integrity and nonrepudiation. Any change to the singed content will invalidate the signature. You create the signature with your private key and other people can verify your signatures by using your public key.\nSign and verify a piece of plaintext You can sign a piece of plaintext by following these steps:\nStep 1: Open a terminal or Powershell window and run the following command:\ngpg --armor --clear-sign Step 2: Type or paste your message in the terminal window.\nStep 3: Press ctrl+d to signal GPG that you are done with your message.\nInfo\nThe clear sign option keeps the signed message readable. This allows people to read your message without needing to go through the verification process. Using the sign option will embed the message in the GPG block. Go and see the difference for yourself! Follow the steps again, but replace --clear-sign with --sign.\nYou can verify a piece of text in a similar way. Just replace the command given in Step 1 with:\ngpg --verify Warning\nIf you created a signed message with the --sign option and want verify and read the contents of the message, you will need to use the --decrypt option instead of the --verify option.\nSign and verify a file Signing a file goes a bit differently.\nStep 1: Assuming the file is in the current working directory and is called \u0026lsquo;foo.pdf\u0026rsquo;:\ngpg --armor --detach-sign foo.pdf This will create a file called \u0026lsquo;foo.pdf.asc\u0026rsquo; in the same directory. GPG will save the signature in a binary format if you leave out the --armor option. The signature file will then have the \u0026lsquo;.sig\u0026rsquo; extension instead.\nInfo\nGPG saves application output in a binary format by default. The --armor option will order GPG to save the output in a text format instead. Text is easier to work with since it can be placed almost everywhere. You can paste it into an e-mail or a Teams message, host it on a web-site or even print it on a piece of paper if you want to. My recommendation is to use the armor option by default and only leave it out when encrypting files since they can be quite large. Output files created with the armor option enabled will have a \u0026lsquo;.asc\u0026rsquo; extension. Binary files will have the \u0026lsquo;.gpg\u0026rsquo; or \u0026lsquo;. sig\u0026rsquo; extensions.\nStep 2: Verify the file with:\ngpg --verify foo.pdf.asc foo.pdf Info\nUsing the --detach-sign option will cause GPG to save the signature in its own file. This the preferred way of doing it because it keeps the singed file in a readable format. You can also choose to embed the signed file in the signature by using the --sign option instead. And just like with the plaintext singing, you will need to use the --decrypt instead of the --verify option to verify and read the embedded file.\nEncrypting stuff for others Apart from singing text and files, you can also encrypt text and files for others. This functionality ensures confidentiality by making your message only readable for the intended recipients of the message. Ensure you have imported and created trust relationships with the public keys of the recipients of your encrypted message. It is also best practice to sign your encrypted messages, so the recipients can verify that the message came from you.\nSign and encrypt a piece of text The following steps explain how to sign and encrypt a piece of plaintext.\nStep 1: Open a terminal or Powershell window and run the following command:\ngpg --armor --encrypt --sign Step 2: The application will ask you to add the recipients for your message. You can just add them by typing their name or e-mail address. Don\u0026rsquo;t forget to also add yourself if you also want to be able to decrypt the message.\nStep 3: Type or paste your message.\nStep 4: Press ctrl+d to signal GPG that you are done.\nYou can decrypt the piece of text in a similar way:\nStep 1: Open a terminal or Powershell window and run the following command:\ngpg --decrypt Step 2: Paste the encrypted message in the terminal.\nStep 3: Press the ctrl+d key combination.\nSign and encrypt a file The following steps explain how to sign and encrypt a file.\nStep 1: Assuming the file is in the current working directory and is called \u0026lsquo;foo.pdf\u0026rsquo;:\ngpg --encrypt --sign foo.pdf Step 2: Add the appropriate recipients. You can just add them by typing their name or e-mail address. Don\u0026rsquo;t forget to also add yourself if you also want to be able to decrypt the file.\nGPG will save the encrypted file as \u0026lsquo;foo.pdf.gpg\u0026rsquo; in the working directory.\nYou can decrypt the file as follows:\ngpg --decrypt foo.pdf.gpg \u0026gt; foo.pdf The decrypted version of the file will be saved as \u0026lsquo;foo.pdf\u0026rsquo; in the current working directory.\nUsing a GUI Not a command line warrior? No problem! There are different GUI\u0026rsquo;s you can use to manage keys and handle signing, verification, encryption and decryption operations. A GUI called \u0026lsquo;Kleopatra\u0026rsquo; already ships with the Windows version of GnuPG. Look for its shortcut on your desktop. On Linux systems, you will have to install the \u0026lsquo;kleopatra\u0026rsquo; package to get the GUI. GNOME users might want to use the Seahorse GUI instead, since it better blends in with the desktop environment.\nOn macOS you can install GPG Suite if you want a GUI:\nbrew install --cask gpg-suite Warning\nGPG Suite also comes with a plugin for Apple Mail. The plugin comes with a 30 day free trail and will cost you around € 25 afterwards. You can install the \u0026lsquo;gpg-suite-no-mail\u0026rsquo; package instead of the \u0026lsquo;gpg-suite\u0026rsquo; package if you don\u0026rsquo;t want the plugin. More on mail client plugins in the next section.\nUsing a mail client plugin Although a bit barbaric, you can just paste the encrypted message in the message body of an e-mail and send it to the intended recipients. Some save the message in a file and add this file as an attachment. This way of working can become quite cumbersome when you have to send a lot of encrypted e-mail and each e-mail has multiple replies you have to read. Luckily there are ways to make your mail client do the heavy lifting. Popular mail clients for Linux systems, such as KMail and Evolution, have builtin support for PGP. Other mail clients will require the installation of a plugin. Here is a list of possible options:\nKMail Builtin support Only available for Linux systems Evolution Builtin support Only available for Linux systems Thunderbird Builtin support since version 78 Available for Windows, macOS and Linux Apple Mail Needs GPG Suite plugin Only available for macOS systems Microsoft Outlook Needs GpgOL plugin, which ships with GnuPG for Windows (so it should be installed already) Available for Windows and macOS systems, but the plugin only works in the Windows version If you prefer a web-interface, you can take a look at Mailvelope. Proton Mail and Tutanota are also good choices if you don\u0026rsquo;t mind registering a new e-mail address.\nWarning\nLetting your mail client handle the encryption process instead of manually pasting it in the e-mail exposes you to some possible risks you should be aware of:\nA plaintext version of the message might be send on accident, because of a bug in the mail application or plugin The mail application or plugin might not encrypt the concept message. Parts of the message are then leaked to the mail server Modern mail applications use HTML for message composition. These messages have a predictable structure, making them more susceptible to Known Plaintext attacks. Some mail applications allow you to switch to a text format when composing a message Using a key server As described earlier: The process of transferring, importing and exporting key files can be quite the hassle. A key server can make things easier. A key server can be seen as a public repository of keys. You can send your own public key to it and receive the public keys of others. You simply need to know their key ID or e-mail address. I am going to use the key server \u0026lsquo;keys.openpgp.org\u0026rsquo; in the following steps.\nStep 1: Export your public key with the usual command: gpg --armor --output public.asc --export 0xFC1B1408. Be sure to replace 0xFC1B1408 with the ID of your own key.\nStep 2: Upload your key using the webform.\nStep 3: Confirm your e-mail address.\nStep 4: Configure \u0026lsquo;keys.openpgp.org\u0026rsquo; as your default key server by adding the following line to your \u0026lsquo;gpg.conf\u0026rsquo; file:\nkeyserver hkps://keys.openpgp.org The \u0026lsquo;gpg.conf\u0026rsquo; file can be found in the ~/.gnupg directory on Linux and macOS systems. On Windows it can be found under %APPDATA%\\gnupg.\nYou can now receive keys in the following way:\n# Receive by e-mail address gpg --auto-key-locate keyserver --locate-keys john.doe@example.com # Receive by short ID gpg --recv-key 0xFC1B1408 # Receive by long ID gpg --recv-key 26B6896326F977B6FA0DBE4B1D047E24FC1B1408 Warning\nThe most reliable way to receive someone\u0026rsquo;s key is by using the long ID. You can use the short ID if the long one is too much type work. Retrieving a key based on e-mail address can be tricky. Not all key servers verify the e-mail address that is used with the key.\nStoring your key on a YubiKey Your private key is stored on your systems internal storage by default. This can create problems when a hacker manages to get access to your system. The hacker can steal your private key file which can used to decrypt your messages and sign things in your name. Protecting your private key with a password does help, but a password can just as easily be captured by using a keylogger. The best way to protect your key is to store on a separate hardware device. A YubiKey is a specialized hardware device which can be used to store different types of key material.\nWarning\nEnsure you have generated your keys on a system that you know is not already compromised. You might want to boot into Tails and use it to generate the private key and move the key material to the YubiKey. Don\u0026rsquo;t forget to make a backup of your private key! You can optionally use the persistent storage feature of Tails to store the backup.\nThe following steps will explain how to move your private key to a YubiKey device:\nStep 1: Buy the key on the website of the manufacturer. You will need a 5 series key.\nStep 2 (optional): Download and install the YubiKey Manager software. There are different ways to do this. You will have 2 options:\nOption 1: Install the platform independent command line Python package. This will require you to install Python and will only give you the command line tool:\n# Install Python3 apt-get install python3 python3-pip # Ubuntu/Debian dnf install python3 python3-pip # Fedora choco install python3 # Windows brew install python3 # macOS # Install Yubikey tools pip3 install --user yubikey-manager Option 2: Download and install the Yubikey Manager software from the Yubico website. This will give you the GUI and command line tool.\nStep 3: Connect the YubiKey to your system.\nStep 4 (optional): Verify that the Yubikey is properly recognized on your system. Use the YubiKey Manager GUI or the ykman list command.\nWarning\nThe \u0026lsquo;ykman\u0026rsquo; application should be in your path when you installed the Python version. Look for it in the installation directory if you downloaded the installer from the Yubico website. On macOS it should be in \u0026lsquo;/Applications/YubiKey Manager.app/Contents/MacOS\u0026rsquo;. On Windows it should be in \u0026lsquo;C:\\Program Files\\Yubico\\YubiKey Manager\u0026rsquo; (look for the \u0026lsquo;ykman.exe\u0026rsquo; file).\nStep 5: Verify that the YubiKey is recognized by GnuPG by running gpg --card-status in a Terminal or Powershell window.\nWarning\nYou might run into a situation where the YubiKey is recognized by the YubiKey Management software, but it won\u0026rsquo;t show up in GnuPG. I personally had no problems on Windows, Ubuntu and Fedora but did stumble into this problem on macOS.\nHere is how I fixed it:\nStep 1: Add the following line to your \u0026lsquo;scdaemon.conf\u0026rsquo; file:\nreader-port Yubico Yubikey The \u0026lsquo;scdaemon.conf\u0026rsquo; file should be in the same directory as your \u0026lsquo;gpg.conf\u0026rsquo; file. You might need to create it if it does not exist.\nStep 2: Restart the scdaemon service with gpgconf --reload scdaemon.\nStep 3: The YubiKey should now show up when running the gpg --card-status command.\nStep 6: Prepare the YubiKey for use. The following code block will show you how to do this:\ngpg --card-edit # Should drop you in a gpg shell gpg/card\u0026gt; admin # Unlock admin commands gpg/card\u0026gt; kdf-setup # Extra hardening: Save PIN\u0026#39;s as hash instead of plaintext gpg/card\u0026gt; passwd Your selection? 3 # Set an Admin PIN. The default is: \u0026#39;12345678\u0026#39; Your selection? 1 # Set an User PIN. The default is: \u0026#39;123456\u0026#39; Your selection? Q gpg/card\u0026gt; name # Set your name here gpg/card\u0026gt; lang # Configure your preferred language gpg/card\u0026gt; quit The Admin PIN will allow you to administer the device while the User PIN allows you use the device. You will need the Admin PIN to do things like adding or deleting key material while you will use the User PIN for day-to-day tasks.\nInfo\nThe passwd selection menu also allow you to set a Reset PIN. A Reset PIN allows a user to reset their own PIN without needing access to the Admin PIN. The reset PIN is disabled by default. You can leave it disabled if the user and the admin are the same person.\nStep 7 (optional): Configure maximum failed PIN attempts. By default the User and Admin PIN\u0026rsquo;s will be locked after 3 failed attempts. You can change these values with the YubiKey Manager command line tool:\nykman openpgp access set-retries 5 2 3 The command above will:\nSet the maximum retry attempts for the User PIN to 5 Set the maximum retry attempts for the Reset PIN to 2 Set the maximum retry attempts for the Admin PIN to 3 Feel free to change these values to suit your own preferences.\nStep 8 (optional): Configure require touch. This will require you to touch the key for every GPG operation:\nykman opengpg keys set-touch aut cached ykman opengpg keys set-touch sig cached ykman opengpg keys set-touch enc cached The commands above will configure the Key to require touch for authentication, singing and encryption operations. The action will be remembered for 15 seconds. This ensures the YubiKey will play nice with things like mail client plugins. You might want to set the value to \u0026lsquo;off\u0026rsquo; for \u0026lsquo;aut\u0026rsquo; if you use things like Ansible. Unless you like touching the YubiKey every 15 seconds during a run, its your party.\nStep 9: Move your master and sub keys to the card. The following code block will show you how to do this:\ngpg --edit-key 0xFC1B1408 gpg\u0026gt; keytocard # Move the master key. Set it as the Signature key gpg\u0026gt; key 1 # Select encryption subkey gpg\u0026gt; keytocard # Move the encryption subkey gpg\u0026gt; key 1 # Deselect encryption subkey gpg\u0026gt; key 2 # Select authentication key. You can skip this step if you don\u0026#39;t have one gpg\u0026gt; keytocard # Move the authentication subkey. You can skip this step if you don\u0026#39;t have one gpg\u0026gt; save Replace 0xFC1B1408 with the key ID of your own key.\nStep 10: Verify everything is OK. Your key information should now be listed at the bottom when running gpg --card-status.\nStep 11: Try to sign a file or a piece of plaintext. You should get a prompt asking you for your User PIN.\nInfo\nThese steps are based on the steps described in the YubiKey Guide. Check out this guide if you need more detailed information. It also describes things like key rotation. Just be aware that this guide has a different key setup than we have created here. We use the master key to certify other keys and create digital signatures. The YubiKey Guide uses the master key for certification only and uses a separate subkey for singing.\nWarning\nIt\u0026rsquo;s important to know that YubiKeys won\u0026rsquo;t prevent hackers from using your private keys, it does prevent them from stealing the keys. A hacker can simply wait for you to plugin and unlock your YubiKey and then start to decrypt and sign stuff, but the hacker will loose access once the YubiKey is pulled from the machine.\nClosing words As you can see from the instructions above, properly setting up mail encryption can be a strait up nightmare for non-technical people. I wouldn\u0026rsquo;t dare to ask my grandparents nor my parents to set this up. I think this is also the main reason why end-to-end mail encryption will never become mainstream. And this is a problem since new privacy regulations in the EU disallow companies from sending personal information in the clear. This forces companies to limit communications over e-mail. Some have even decided to stop communicating over it altogether.\nAbout a month ago, I wanted to end an insurance contract. I send an e-mail to the insurance company and got an automated reply back instantly. The reply stated that the company had stopped all customer communications over e-mail. I ended up canceling my contract through WhatsApp. Each business ends up with its own solution to the problem. They request you start a chat session on their website or message them through certain chat clients.\nI have also seen some creative solutions. One company had sent me some personal information which was saved in an encrypted PDF attachment, but the password was my zip code, which could be easily bute-forced or obtained with some OSINT work. \u0026ldquo;The law says we must encrypt all personal information, but nobody said anything about using strong passwords\u0026rdquo; they must have thought. It made me chuckle a bit.\nThis whole situation saddens me. With e-mail, you have the possibility to freely select your e-mail provider and your e-mail application. You can even become your own provider by setting up a mail server yourself. Most chat platforms don\u0026rsquo;t give you this kind of freedom. You are forced to use the applications provided by the platform owner and are also forced to send all communications through their systems. This is all fine then the platform is still in the public\u0026rsquo;s good graces, but things get difficult when it comes into dispute and users want to leave.\nMany experienced this when Facebook took over WhatsApp. People wanted to leave and fled to Signal, but many remained on WhatsApp. All my colleagues and geek friends moved to Signal, while all my family and non-geek friends stayed on WhatsApp. I ended up with both applications installed on my phone. I will be talking more about chat platforms in the next blog post since it will be about this very subject.\n","permalink":"https://vharmers.github.io/blog/posts/opsec_mail/","summary":"Welcome to the second blog post in this blogging series. I recommend reading the introduction post before starting with this one. Email is one of the oldest ways to communicate on the world wide web. And since the internet was created with openness in mind, so it shouldn\u0026rsquo;t come as a surprise that e-mail wasn\u0026rsquo;t designed to be very secure. Sending an e-mail is like sending a postcard. Every party involved in the delivery process can read the contents of the message.","title":"The OpSec blog series - E-mail encryption"},{"content":"Over the span of our lives, we accumulate a lot of stuff. Some of this stuff is precious to us so we keep it in a secure place like a safe or strongbox. Some of this specious stuff can also be digital and therefore must be secured into digital strongboxes and safes but what happens when you lose the key?\nWhen your work in IT, you have a minimum of two employers: the company you work for and your family. I am the designated IT support and data custodian at home. It’s my job to keep all family pictures and other important files complete and available. And after going through the experience of losing my pictures of our vacation trip to Paris years ago, I am next to paranoid when it comes to making backups.\nI have around 8 copies of all important data. I keep backups on laptops, external drives and 3 different cloud storage providers, but there is one little problem: it’s all encrypted. My greatest fear, apart from being randomly attacked by apes, is that I somehow lose access to the encryption keys.\nLike a good boy, I store all my passwords in a password manager, but what if I forget the master password? You know that thing when you type a password so often it becomes muscle memory but then you forget the actual password? And then you can’t type it anymore when you realize that you forgot it? Truly the stuff of nightmares.\nAnd how will my family be able to access the data if something happens to me? I could easily be abducted by aliens, isekaied to another world or ascend to another plane of existence by accident.\nI therefore came up with a system that allows me or my family members to access my password database in case of emergency. And no it doesn’t involve just giving my parents a written copy of my master password because that would be too easy.\nThe first step would be to collect copies of all the necessary files you want to put in your “digital life raft”. Put them all in one folder.\nThen we use an application such as 7-Zip to create a password protected archive from the folder. Windows users can download the installer from the 7-Zip website. MacOS users can use Keka instead. You are free to use something else if you want.\nNow it’s time to add the magic sauce. We are going to split the archive password into multiple parts using Shamir’s Secret Sharing (SSS). The idea behind SSS is that you can split a given secret into an X amount of shares. Reconstructing the secret requires an Y amount of those shares (where Y \u0026lt;= X of course).\nYou can use the following website to split your password into parts and combine those parts to reconstruct the password. You can save the page as an HTML file to your computer if you want to use it offline.\nIt is recommended to build the page from source. You will need Git and Python3 installed on your system. These are the steps you need to take:\ngit clone https://github.com/iancoleman/shamir.git/ cd shamir python3 ./compile.py Then you can open the file called shamir-standalone.html with your browser. There is also an older alternative called PassGuardian you can take a look at.\nBoth of these websites use the secrets.js Javascript library, which is an implementation of SSS. The library has been audited in 2019. You can read the audit report over here if it makes you feel better.\nInfo\nThere is also a command line implementation for Unix/Linux systems. On Debian, you can install it with the following command apt-get install ssss. It is also available for macOS through Homebrew. You can install it with brew install ssss. Use the ssss-split and ssss-combine commands to create and combine the shares.\nOnce you have created the shares and distributed them to your family members and trusted friends, you still have to store your archive somewhere safe. I would recommend you store it on a read-only medium. Don’t use USB sticks since the data on them can easily get corrupted or deleted by accident. Burn the archive to a CD or store it on an SD card (don’t forget to put it in read-only mode by flipping the switch on the side).\nIt’s also not a bad idea to include a copy of the needed software and instructions. You can get a portable version of 7-Zip over here.\n","permalink":"https://vharmers.github.io/blog/posts/life_raft/","summary":"Over the span of our lives, we accumulate a lot of stuff. Some of this stuff is precious to us so we keep it in a secure place like a safe or strongbox. Some of this specious stuff can also be digital and therefore must be secured into digital strongboxes and safes but what happens when you lose the key?\nWhen your work in IT, you have a minimum of two employers: the company you work for and your family.","title":"Creating a digital life raft"},{"content":"Have you ever had the desire to improve the security of your systems but had no idea how to do it? You might have read all kinds of articles on the web about hacked companies that needed to pay large sums of money to get access to their data again. But what can you do, when you are just a system administrator of a small company with a non-existent security budget? Well, you can start reading the OpSec blog series in order to acquire the knowledge you need to make your environment more secure and give hackers a hard time.\nMy name is Valentijn Harmers and I have been working for Fox-IT/NCC Group as a DevOps Engineer for about 5 years now. Working at Fox has been a special experience. After finishing my Bachelors degree, I wanted to do something with software development, Linux and IT security. I went looking for a job but had a difficult time finding a job that had all 3 elements, but I was a greedy man and was committed to finding the perfect job for me. My job-seeking journey ended at Fox, where they were willing to start me off as a DevOps Engineer for the Threat Intelligence department.\nI have done many different tasks over the years, but am currently specializing in cloud infrastructure and security. There is no particular grand idea behind this move. I just didn\u0026rsquo;t like data-center visits, so moving my attention to the cloud made sense. I have always been interested in learning from others and have in turn been more than willing to share my own knowledge and experience. The OpSec blog series gives me the opportunity to share knowledge and experience among a larger audience.\nSo far the personal introduction. Let\u0026rsquo;s get back on topic and discuss what this blogging series will look like. I will start off by explaining some general theoretical knowledge in order to lay down a foundation. I can then build the rest of the blog posts on top of it. Each post will cover a particular topic like chat communication, drive encryption or authentication. Large topics can be stretched over multiple blog posts. Each post would preferably contain a theoretical and a practical part.\nI haven\u0026rsquo;t decided on a definitive topic list yet, but I have the following topics in mind:\nCommunication - PGP and SSL/TLS Communication - Secure chat applications Disk encryption Authentication - 2FA and MFA Authentication - Secrets Management Authentication - Going passwordless Infrastructure as Code - Ansible Infrastructure as Code - Git Asset/Vulnerability management I think its also a good plan to set a scope for this blog series:\nWe don\u0026rsquo;t want the posts to be too difficult to follow. You should be fine if you can open up a command terminal or Powershell prompt and have some basic networking knowledge The posts will focus on small companies and individuals. All the introduced applications are free of charge and easy to set up, but might not scale well in enterprise environments I will write instructions for Microsoft Windows, Mac OS, Ubuntu and Fedora operating systems Info\nThese info blocks contain extra information which you are not required to know in order to understand the rest of the post. Feel free to skip them if you hate reading.\nWarning\nI will use these warning blocks to warn you of potential adverse consequences.\nWhat is IT Security? Let\u0026rsquo;s talk about what IT Security actually is, or more how I see it. IT Security consists of two parts: Information Technology (IT) and Security. IT is all about technology, processes and people. Security is all about confidentiality, integrity and availability, which is also known as the CIA triad. Let\u0026rsquo;s take some time to explain both of these terms.\nSome sleazy salesman might have tried to convince you otherwise, but there is no magic software solution that will fix all of your problems and protect you from evil hackers. This is because every solution you deploy will need to be managed by people. And those people will need to have a process to follow in order to maintain the solution and respond to events in a uniform manner. You will need all three elements to be effective.\nPeople who have followed any security certification such as (ISC)² CISSP, (ISC)² SSCP or CompTIA Security+ will know about the CIA triad. It is one of the first things they introduce you to. Confidentiality is about only sharing data with those who are allowed to have access to it. Integrity is about ensuring data is complete and accurate. And Availability is about ensuring data is accessible to those who need it in a timely fashion.\nThose who have obtained the Systems Security Certified Practitioner (SSCP) certification will also be acquainted with the CIANA acronym. CIANA is CIA + Nonrepudiation and Authentication. Nonrepudiation prevents people from being able to deny something they have said. The easiest example of this is the use of signatures.\nWhen you make a promise to someone, this promise can be written down in the form of a contract. Your signature on this contract proves that you know about the promise and are committed to keeping it. You cannot, later on, deny that you never knew about it and can be held accountable if you break the terms of the contract.\nAuthentication is the process of verifying that someone is who they claim to be. You take on an identity and supply proof that you are who you say you are. The identity is generally a username and the proof is a password, but there are also all kinds of other proofs you can use such as an OTP code or a fingerprint. Even things like body weight can be used as a proof. Authentication is something of great importance. Most breaches of security happen because of compromised credentials. Attackers find a way to login on a privileged account and take things from there.\nThis might be a lot of information to take in at once if you are new to the IT Security field. But just remember: IT Security is all about ensuring Confidentiality, Integrity, Availability, Nonrepudiation and Authentication (CIANA) and this is all achieved by Technology, Processes and People (TPP). There is also a longer version of CIANA which is CIANAPS where the P and S stand for Privacy and Safety, but I will leave it at CIANA for now. I can recommend the SSCP CBK (second edition) written by Mike Wills if you are interested in knowing more about CIANA and its practical application in IT Security.\nWhy would you need IT Security? Now we know what IT Security is, it\u0026rsquo;s time to discuss why you would need it and how it contributes to the success of a company or your own private life. And to explain this one, I need to go back in the past. You see, went I was still a kid, I played a strategy game called \u0026ldquo;Stronghold\u0026rdquo;. The game would give you a piece of land to build your hold on. You would start off with a \u0026rsquo;lord\u0026rsquo;s keep\u0026rsquo; and some resources such as wood, stone and food to get you started.\nThe goal of the game was to develop your economy and reach a certain goal such as \u0026ldquo;deliver 400 pieces of bread before the end of the year\u0026rdquo;, but the game wouldn\u0026rsquo;t make it easy for you. Enemy soldiers would periodically invade your land and try to destroy everything you have built. You could resist these attacks by building fortifications and recruiting soldiers, but this required resources produced by your economy. You needed stone or wood to create walls and you needed weapons and villagers to create troops. Economy and security were highly dependent on one another.\nAnd the enemy soldiers weren\u0026rsquo;t the only thing you had to worry about. There were also natural disasters such as famine and disease you had to deal with. Grain crops would fail, impacting your bread production or your cows would become sick preventing the production of cheese. Each one of these problems had the possibility of causing a chain reaction. A shortage of food made unhappy villagers. Unhappy villagers would eventually leave to find a better future elsewhere. Leaving villagers would lead to understaffing, which would cause parts of the production process to stop functioning, continuing the spiral of decline.\nThis game taught me a lot. Went I started out, I desperately tried to build a wall around all of my buildings. I didn\u0026rsquo;t want to lose anything but ended up losing everything. The construction costs for the wall were too high and in situations where I actually managed to build it, I didn\u0026rsquo;t have enough archers to defend all of it, leading to gaps in my defenses. I learned to layer my defenses. I would build a stone wall around my most important buildings and used a combination of wooden walls and watchtowers for the other buildings.\nI would lose some farms and hunter shacks with every attack, but those were easily rebuilt. I would always keep some resources and jobless villagers on hand to compensate for these losses. At this point you might be thinking: \u0026ldquo;I thought this guy would explain why I needed IT Security, but all he does is talk about some game he played when he was a kid\u0026rdquo;. You will need to read between the lines for this one. Replace the buildings with assets (such as servers, databases and printers), villagers with employees and soldiers with SOC analysts, security officers and security engineers and you have a company. A stone wall becomes a firewall and a watchtower becomes an Intrusion Detection System (IDS).\nThis game taught me that there is a delicate balance between acquiring new things and protecting what you already have. As long as you have something of value, there will be others who will want to take it away from you. And the easier you make it, the more tempted they will be to act on their desires. This doesn\u0026rsquo;t mean you should be paranoid about security. You just need enough of it to not make it worth their while. You will need to ask yourself the question: \u0026ldquo;What am I or is my company worth?\u0026rdquo;. And when answering this question, it is important to not only look at tangible things like laptops, servers and paper records but also at intangible assets like trade secrets.\nWhen you know what you are worth, you can start protecting the things that are yours. You will have to make tough decisions on where to focus your defense. Ideally, you want to protect everything, but like in Stronghold, this is just not feasible. This doesn\u0026rsquo;t mean you just \u0026ldquo;let it be\u0026rdquo;. You should make plans about what to do if one of these assets is lost to you.\nIT Security can be hard. You are trying to create a stable environment in a chaotic world. You feel like a shock absorber in a car. You take the pummeling from the outside world so the rest of the company can do what they do best. And the better the shock absorber functions, the smoother the ride will be.\nSystem setup It is time to do something practical. We will install a package manager on our system. A package manager is an application that can be used to install, update and remove other applications (revered to as packages). Using a package manager over manually installing every application has several advantages:\nThe applications are downloaded from a trusted source It\u0026rsquo;s easy to keep all applications updated with the latest (security) patches It\u0026rsquo;s quicker. I can install the Firefox web browser, GIMP and Libre Office on a Windows system with just one command: choco install firefox gimp libreoffice Below you will see installation instructions for the different operating systems.\nMicrosoft Windows For Windows we are going to install the Chocolatey package manager.\nStep 1: Open up an administrative Powershell window\nStep 2: Run the following command in the window:\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System. Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString (\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) Step 3: Ensure the application was installed successfully by running: choco -?\nmacOS For MacOS we are going to install the Homebrew package manager.\nStep 1: Open up a Terminal window\nStep 2: Run the following command in the window:\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; Step 3: Ensure the application was installed successfully by running: brew --help\nStep 4 (optional): Disable telemetry by running the following command: brew analytics off\nUbuntu/Fedora Ubuntu and Fedora already have package managers of their own. There is no need to install anything for now.\nClosing remarks This will be all for today. Take your time to process all the information I have given you. Don\u0026rsquo;t forget to relax once in a while. Maybe play a game to take your mind off things. I will see you in the next post.\nContacting the author Do you have any questions, feedback or remarks after reading this post? Feel free to contact me. You can find my contact info on the home page of this blog.\nWarning\nI am quite strict on who I add as a connection on Linkedin. I prefer to not accept connection requests from strangers. You are always free to shoot me a message though.\n","permalink":"https://vharmers.github.io/blog/posts/opsec_intro/","summary":"Have you ever had the desire to improve the security of your systems but had no idea how to do it? You might have read all kinds of articles on the web about hacked companies that needed to pay large sums of money to get access to their data again. But what can you do, when you are just a system administrator of a small company with a non-existent security budget?","title":"The OpSec blog series - Introduction"},{"content":"As someone who works in the IT sector and does all kinds of tech stuff in his free time, having a proper working environment is of the utmost importance.\nThe term “Working environment” is a broad term with can be anything from the people you work with to the desk you sit at, but I am focusing on the thing I spend my time looking at for most of the day.\nIt’s the screen of my computer or more specifically: the graphical environment rendered by the operating system on my monitor. This environment means a lot to me.\nIt allows me to keep up with the latest news and communicate with friends, colleagues and family. It gives me access to more knowledge than I can ever consume in a lifetime.\nIt also allows me to do my work remotely. I can live with my parents in the countryside instead of being forced to rent an expensive apartment in the city.\nIt fascinates me how my choice of working environment has changed over the years and how my worldview and way of thinking changed with it.\nThe early days The first computer I got my hands on was my dad’s. He had bought a new desktop system and he allowed me to use it from time to time. I can’t remember the specs since I was very young at the time.\nIt was one of those classical white-colored desktops with a small monitor and a noisy keyboard. It ran the Windows 95 Operating System and I thought it was amazing.\nBut we didn’t have internet back then, so apart from some games, there was nothing on it. It didn’t take long for me to get bored with the games and I started poking around in the system.\nI started looking in system directories and playing with system settings. My dad wasn’t happy with my little adventures. I can’t remember how many times he had to move the system back to a previous restore point in order to undo my changes.\nI got my own system much later. My dad had bought a new laptop and I was allowed to have the Windows XP desktop system we both shared at the time. The desktop was moved from the attic to my own bedroom.\nI was very excited to be having my own computer, but immediately stumbled into the first hurdle: The thing was running on snail power. The system had an Intel Pentium processor and a whopping 512 MegaBytes of memory.\nI also had a cheap wireless network receiver which would only work half of the time. Combine this with a modem which needed to be restarted once a week at best and once a day at worst.\nThe system took forever to boot up and web pages took ages to load. And this was at a time when Windows Vista was just released. Web sites became more complex and required more and more resources to load.\nI did everything in my power to speed up my system. I disabled unnecessary services (and even some necessary ones because I obviously didn’t know what I was doing), removed unnecessary software, used the lightest virus scanner I could find (it was Panda Antivirus I believe) and even configured the system to use a USB stick to store virtual memory (in Vista it was called ReadyBoost, but XP already had something similar).\nNone of it had a noticeable impact, but it did teach me how the Windows operating system worked. This time had thought me two valuable lessons:\nBeing bored from time to time is healthy, especially at a young age. It sparkles the curiosity Having limits motivates you to overcome those limits. I wouldn’t have known so much about the Windows OS if I hadn’t had a slow system My studying days I ended up studying Information Technologies (IT) at the local university in my town. This wasn’t however my first choice. I always wanted to become a police officer, but didn’t pass the fitness test.\nIn hindsight, I think it was for the best. I was in love with the idea of being a police officer and chasing bad guys, but didn’t have the right personality traits for it. I am too much of a thinker and not much of a do’er.\nApart from learning how to code (I was pretty much addicted to it), I also was introduced to an OS called GNU/Linux (or Ubuntu to be more specific). After running it in a virtual machine for some time, I felt confident enough to install it on my laptop and made it my daily driver.\nI did a lot of Distro-hopping over the years, but mainly settled with Fedora and OpenSuse. I loved the openness of the system. Windows always felt like an overcomplicated black box, while GNU/Linux felt much more open and the system was easier to understand with its “everything is a file” design.\nI spend many hours exploring the system by looking at configuration files and studying man pages, but this wasn’t always purely for fun. I had a lot of problems with my graphics card.\nI can tell you that you’re not having a good day when you are desperately trying to fix a screen brightness control problem before the screen burns your eyes out.\nThese stability problems eventually made me move away from Linux. The biggest problems I had were graphical issues, such as problems with screen configurations and driver stability. I also had issues with putting the system in suspend mode.\nI heavily relied on those features. I often had to hook up my laptop to a beamer or external screen to give presentations. We also moved from classroom to classroom throughout the day, so having a laptop that could properly go into and come out of suspension was essential.\nI loved the OS, but the setup proved to be too unreliable in the end. I can still clearly remember an incident where my system froze while giving a presentation in front of my class. I was forced to reboot my laptop.\nI can also remember another incident where my system started rebooting because it failed to come out of suspended mode. And it happened just before it was my turn to give another presentation.\nI eventually had enough of it and decided to buy a MacBook Pro. I enjoyed this MacBook since I could run all my favorite Linux tooling on it without having the reliability issues that plague Linux Distros.\nEarly career After finishing my studies, I accepted a job at a CyberSecurity company and had to move from the east of the country to the West. I rented an apartment and it didn’t take long before I was confronted with the negative aspects of living in the city. My precious MacBook had been stolen from my apartment.\nI sadly couldn’t track the laptop since it was encrypted and wouldn’t boot up without the password. The recovery environment was also protected with a password. This however meant that the tacking software never had a chance to report on the location of the device.\nI reported the theft to the police, gave them the footage of my IP camera and filed a claim with the insurance company. My claim was eventually approved and I received money to buy a new laptop. I thought about buying another MacBook, but decided to buy a Dell tablet running Windows 10 (x64 not ARM).\nI did enjoy the MacBook but I also had another Windows laptop I used for gaming and wanted to be able to access all my data on both. This proved to be a challenge since both systems had their own ecosystems and finding something that worked for both of them was difficult.\nApple provides its users with a free office suite, but I couldn’t use it since I couldn’t open those files on my Windows system. I used Bitlocker to encrypt my external hard drives, but macOS couldn’t read those drives. I tried using a software package from a third party to read them from my Mac, but the performance was poor.\nAnd since you can’t use a MacBook as a gaming system, I decided to make the switch back to Windows. I kept a bulky laptop for gaming and a tablet as a daily driver.\nUsing the tablet was fun at the beginning. I could do some coding at my desk and then detach the tablet from its keyboard to watch some Netflix on the couch when I was done. It however didn’t take long for me to notice the drawbacks.\nI initially wanted to use the tablet like an always-on system, mostly relying on the suspend function and rarely shutting it down. I got used to this way of working when I still had my Mac. The ability to just start where you left off yesterday was something I highly appreciated.\nMy Windows environment proved to be too unstable to support this way of working however. Things just stopped working over time. I had times when the tilt sensor wasn’t working anymore or that one time when the touchscreen stopped being a touchscreen and turned into a regular screen.\nRebooting the device fixed all of the issues, but it required me to open up all my applications again. I was quite disappointed about this. I could keep my Mac running for weeks if not months only needing to restart it for updates. It was definitely something I took for granted.\nApart from this issue, there were some smaller issues and to give you an impression, here’s a list:\nThe tablet was positioned at a fixed angle in its keyboard stand. Dell had an additional keyboard available where you could change the angle, but you needed to buy it separately. You couldn’t put it on your lap, since the tablet wasn’t locked into position when in the keyboard. It had this annoying issue where it would periodically reset the brightness to a fixed value (30%). And this was also in the time when Windows 10 didn’t have a brightness slider in the sidebar. You had to tap a button to cycle through the brightness levels. And off course it went from low to high, so you first had to burn your eyes out before coming back at the lower brightness level, only for the system to turn it up again after 5 minutes. I went mad over this issue. I managed to trace the issue back to a custom energy profile Dell had installed in the system. Switching it to the Windows default fixed the issue. The system was not able to detect the storage device after coming out of a suspended state. A normal reboot didn’t help. The Dell BIOS was essentially telling me that it couldn’t find a medium to boot from. After a long period of troubleshooting, I managed to trace the problem back to a feature called Link Power Management (LPM) which was part of the Intel Rapid Storage Technology service. Disabling this feature solved the problem. Windows 10 is equipped with a tablet mode feature. The idea was that the normal layout would be used when the tablet was connected to the keyboard, but would switch to a more touchscreen-friendly layout when disconnected. This didn’t work since Windows seemed to choose a layout at random. I had to manually make the switch by pressing a button in the sidebar. Although this tablet was taking it to the extreme, all the Windows devices (including one Windows Phone) I owned had a multitude of problems. There are just too many parties involved in my opinion.\nYou first have different hardware manufacturers delivering the individual components and drivers. Then you have Microsoft supplying the OS which has to work with a wide range of hardware configurations. And then on top of that, you have the laptop (or desktop) manufacturer who adds their own special sauce to the mix.\nAll these layers of complexity don’t exactly fit on top of each other. Everything is a Windows upgrade away from failing. This reminds me of this issue I was having on my gaming laptop.\nMy laptop has these function keys. Most of these keys are handled by the Windows OS itself. I am talking about keys for adjusting things like the volume or screen brightness, but there was this one key for disabling and enabling the touchpad.\nThen one day it stopped working and I can tell you, nothing is more annoying than touching the touchpad on accident when you try to sneak up on someone in an FPS game.\nAfter looking into the issue I discovered that a certain “Control Center” application handled this functionality. The application was used to configure fan speeds but had this as an additional job. It however seemed to be removed during a Windows OS upgrade. Installing the application again returned the lost functionality.\nEverything seems to be tied together with duct tape. The setup held itself together until a change was introduced. And these are also the type of issues that can’t be known beforehand since they only show themselves after months of extended use.\nApart from the state of the device as a whole, the Windows OS also isn’t what it used to be. I personally enjoyed Windows XP and Windows 7 the most. I even have a little love for Windows Vista. The Longhorn theme looked quite fancy. I even preferred it over Windows 7’s Aero theme.\nBut Windows 10 feels like an unfinished product. Like someone started moving features from the old user interface to a new one and decided to call it a day when it was only halfway done. The user experience is just terrible when compared to other Operating Systems.\nI now was a view years into my first job as a DevOps Engineer. This didn’t mean that I actually followed the DevOps practices. I was just a dude who wrote code and kept the servers running.\nWorking in tech involves solving lots of problems. You spend hours debugging code in an effort to find the cause of an annoying bug. And then you also have to be able to switch to your operational role and troubleshoot a server that is acting up all of a sudden.\nThis process drains you psychologically as your mind tries to shift through a list of possible causes or tries to come up with steps that could be taken to narrow down the search area.\nIt is important to give your mind some rest when you come back home from work. I had to learn this the hard way. During the day I spend my time solving problems at work, came home and continued trying to fix my own stuff, sometimes until deep into the night.\nI knew I couldn’t go on like this, but I just couldn’t properly relax until the problem I had was solved. This was especially the case when I was constantly reminded of the problem’s existence.\n“Why spend all the manpower and resources to build something like this when it doesn’t work?” was a thought that often entered my mind when I was scouring the forums looking for a solution late at night.\nThis went on and off for a period of about 2 years before I had enough. I went to the local Amac store (an Apple reseller) and got myself a MacBook Air. I scraped the “everything must work on every system” rule and removed all the unnecessary software from my gaming laptop, leaving only the bare minimum I needed to play games.\nThe present day My little Dell tablet is now safely stored away in one of my desk drawers. I have given it the name of “Loki” for all the mischief it had caused. I still can’t get the suspend functionality to work properly, but that’s okay.\nI think differently about tech these days. In the past, I preferred the products which gave me the most functionality and flexibility. I wanted to get “the most bang for my buck”. Now I just want something reliable and simple to use even if I need to pay a higher price for it or have to accept certain limitations.\nI would like to explain this stance with an example. It will be the last one, I promise. I will start wrapping things up after this one.\nI would like to compare two note-taking applications: Standard Notes and Bear. Let’s start with Standard Notes. The application is supported on a wide variety of platforms including Windows, macOS, Android and iOS.\nThe user can choose from a wide array of editors to take their notes with. There is a plaintext editor, a rich text editor, three markdown editors, a special editor for creating to-do lists and even an editor for creating excel sheets. They even offer cloud file storage and everything is end-to-end encrypted. The functionality of the application can be further extended by the use of plugins.\nBear is only available for macOS, iOS and iPadOS. Notes are created in Markdown and are stored in the user’s iCloud storage. Created notes can be organized by the use of tags.\nAt first sight, you might be thinking that Standard Notes is the clear winner here since it clearly offers the most features. I however ended up switching from Standard Notes to Bear and I will tell you why.\nThe company behind Standard Notes has chosen to make its application available on a wide range of platforms. Creating native applications for each platform requires a lot of investment and comes with a high maintenance cost.\nCompanies therefore look towards cross-platform solutions such as Electron and React Native to get the job done. Aside from having a reputation for being slow and hungry for resources, these solutions don’t blend in with the design language of (all) the platforms they are available for.\nThis also was the case with Standard Notes. Their UI didn’t seem to fit in. The developers of Bear, on the other hand, could just create a native application for macOS, iOS and iPadOS since they wouldn’t support other platforms anyway. The result is a snappy application that blends in well with the Apple design.\nBear only allows you to write your notes in Markdown, white Standard Notes gives you multiple options. But because Bear Notes puts their focus on Markdown editing, they ended up with a high-quality editor which doesn’t hold a candle to the multiple Markdown editors available in Standard Notes.\nThe last thing I wanted to mention is the way both apps sync notes between devices. Standard Notes requires you to create an account with them in order to sync your notes. This means that you will have to create another account, which you will have to manage and secure. You will also need to go through the sign-in process on each of your devices.\nBear doesn’t have this inconvenience. You just download and install the application from the AppStore and your notes will be ready for you when you open the app.\nStandard Notes tries to attract a large customer base by trying to please everyone. This approach however comes at a price. It makes their application feel generic. It doesn’t seem to offer anything special (in my opinion).\nBear takes a different approach. Instead of trying to please everyone, it focuses on a specific target group, which can be defined as “Apple users who like to use Markdown to take notes”. This gives them a smaller group of potential customers but results in a higher quality product.\nThe same can be said for Windows and macOS. Windows has always been a generic OS. It’s used in all kinds different of systems. You can find it on normal consumer laptops, business laptops, gaming desktops, rugged military-style laptops and many more types of systems.\nApple has however chosen to focus on normal consumers with its Air product line and professional business users with its Pro products. This strategy does mean that they miss out on a large group of potential customers, but it allows them to provide their existing customers with products that are more attuned to their needs.\nIt is my personal opinion that specializing offers better long-term prospects than trying to attract an as large customer base as possible by going the “jack off all trades” route.\nOffering a generic product or solution might get you a lot of customers in the short term, but it won’t secure your position in the long term. It is easy for your competitors to come up with a similar product and start eating away at your customer base. It essentially requires you to be the biggest fish out there and this is something you can’t keep up forever.\nI personally think that the Windows Operating System is already done for. Android has already beaten it when it comes down to market share and Microsoft failed to enter the smartphone market with Windows Phone.\nPeople will be less inclined to buy Windows devices since the average Joe can do everything they need with their smartphone. You can even get a full desktop experience, if you have a high-end Samsung device, by making use of Samsung DeX. All you need is a docking station, a monitor, a keyboard and a mouse.\nThe interesting thing is that Windows Phone had a feature called “Continuum” which essentially did the same thing. It allowed you to connect your Windows Phone to a monitor to get a desktop experience.\nI see a future where people will show up at the office, make their way to one of the available flex desks, put their phone in a docking station and start typing away on the keyboard. They would even be able to pull their phone from the docking station and continue working on their phone on the train ride home.\nThe sale of laptops and desktops will keep declining until only a small group of consumers are left. These will be mostly people who need more computing power than a phone can provide.\nAhh yes, I was supposed to tell my present day situation, but I got a bit too carried away. Let’s see, I have been using the MacBook Air for about two and a half years now and I still love it.\nThe device is still as fast and reliable as the day I booted it up for the first time. I haven’t had any problems with it. It’s a 2019 MacBook Air BTW. My employer also assigned me a MacBook Pro around the same time I got the Air and the Pro has been running fine too.\nI was so happy with the experience that I bought an iPhone Pro (which would be replacing my BlackBerry Key 2) and an iPad Pro. And I must say that I have no complaints. Both devices are fast and responsive. The OLED displays are a feast to the eye and most importantly: none of them displayed any buggy behavior or had any problems.\nAnd I think this is something special since every Windows and Android device I had, had at least something that didn’t work as it was supposed to. It is also noticeable that Apple focuses on providing its users with an environment where they can be productive rather than overwhelming them with options and other flashy things.\nThe system is geared towards reliability and simplicity. My two favorite features are the ability to group notifications in a planned overview and the ability to use the iPad as a secondary display for my MacBook by using SideCar. Oh, and I also like how fast and reliable Face-ID works and the password synchronization between devices also saves me a lot of work.\nAnd I know these features sound quite boring. I sound like a dad who is excited about the new minivan he just bought and can’t stop talking about the armrest on the driver’s seat and how he can remove the back row of seats to create more free space.\nBut the thing is that these are the features I use every day. These systems should be boring and dependable, so you can focus on using them to do exciting things.\nClosing words So you made it all the way to the end of this post? I must be an excellent writer or you must be very bored. I didn’t plan on making it this long, but it quickly became the dumping ground for all my frustrations, ideas, opinions and predictions. It has been quite therapeutic. It felt good to write it all down. I hope you learned something too.\nAs a final disclaimer before people start accusing me of being an Apple fanboy and a Windows and Android hater. I don’t care what system you use to get things done. If you are happily using Windows or Android, then I am happy for you too. Use the system that suits your needs best.\nIt also doesn’t mean that I agree with everything Apple does or like all the products and services it provides.\nContacting the author I am always interested in the experiences of others. Maybe you had the same experiences as me or maybe something completely different? I would love to hear your view on this.\nThe easiest way to reach me is through Twitter. My username is @vharmers. I am also reachable on Keybase and on Matrix where my username is @vharmers:matrix.org.\n","permalink":"https://vharmers.github.io/blog/posts/working_env/","summary":"As someone who works in the IT sector and does all kinds of tech stuff in his free time, having a proper working environment is of the utmost importance.\nThe term “Working environment” is a broad term with can be anything from the people you work with to the desk you sit at, but I am focusing on the thing I spend my time looking at for most of the day.","title":"My working environment throughout the years"},{"content":"Typing your password at every system bootup might get you annoyed at times. Especially when you are used to Windows and macOS systems which store the disk decryption password in the TPM.\nBut what if I told you that you can also achieve this on your Linux setup. We can use an application called \u0026lsquo;Clevis\u0026rsquo; to get the job done.\nI will describe the installation and configuration steps for Ubuntu and Fedora, but the steps should be about the same for other Linux distro\u0026rsquo;s.\nInstallation Open up a terminal as root user and run the following command to install the necessary packages.\n# Ubuntu apt install clevis clevis-tpm2 clevis-initramfs clevis-systemd # Fedora dnf install clevis clevis-pin-tpm2 clevis-dracut clevis-systemd Configuration Now we configure clevis to unlock a specific partition for us:\nclevis luks bind -d /dev/sda3 tpm2 \u0026#39;{\u0026#34;pcr_ids\u0026#34;:\u0026#34;7\u0026#34;}\u0026#39; Replace /dev/sda3 with the encrypted partition you want to unlock with clevis. You can list all your partitions with the lsblk command. Repeat the command for every encrypted partition you have.\nNow we just enable Clevis on boot:\nsystemctl enable clevis-luks-askpass.path Thats it. Now it\u0026rsquo;s just a mater of rebooting your system.\nWarning\nIt might take some time before Clevis unlocks the disk. The system might even ask you to input your password. Just be patient!\nWarning\nI had a problem where installing the clevis package didn\u0026rsquo;t trigger an initramfs rebuild. I solved it by simply running a dnf upgrade which would install a newer kernel version and trigger a rebuild.\nYou can also manually rebuild the initramfs by running the following command:\n# Ubuntu update-initramfs # Fedora dracut --regenerate-all ","permalink":"https://vharmers.github.io/blog/posts/clevis/","summary":"Typing your password at every system bootup might get you annoyed at times. Especially when you are used to Windows and macOS systems which store the disk decryption password in the TPM.\nBut what if I told you that you can also achieve this on your Linux setup. We can use an application called \u0026lsquo;Clevis\u0026rsquo; to get the job done.\nI will describe the installation and configuration steps for Ubuntu and Fedora, but the steps should be about the same for other Linux distro\u0026rsquo;s.","title":"Passwordless LUKS setup with Clevis"}]