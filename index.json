[{"content":"This post serves as the support page for my book \u0026ldquo;Travelin\u0026rsquo; The Netherlands\u0026rdquo;. Here you can find additional downloads and links.\nYou can buy the book at the following places:\nKobo eBooks LeanPub Amazon Kindle Apple Books Route download Click here to download the GPX file with the full route.\nPhotos High resolution versions of the photos in the book can be found here (in order of appearance):\nOosterscheldekering Ring-tailed lemur Looming weather Highlander Cupola Valkenburg Boar Dunes Multitool Blade Comparison Multitools Knives View from the Plompe Tower Flashlights Contact Multiple contact options are listed on the home page.\n","permalink":"https://www.vharmers.com/posts/travelin_nl/","summary":"\u003cp\u003eThis post serves as the support page for my book \u0026ldquo;Travelin\u0026rsquo; The Netherlands\u0026rdquo;. Here you can find additional downloads and links.\u003c/p\u003e\n\u003cp\u003eYou can buy the book at the following places:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.kobo.com/ebook/travelin-the-netherlands\"\u003eKobo eBooks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://leanpub.com/travelin_nl\"\u003eLeanPub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://kdpbook.link/for/B0FBSXQKRW\"\u003eAmazon Kindle\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://books.apple.com/us/book/id6746772057\"\u003eApple Books\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"route-download\"\u003eRoute download\u003c/h2\u003e\n\u003cp\u003eClick \u003ca href=\"RoadtripNederland.gpx.zip\"\u003ehere\u003c/a\u003e to download the GPX file with the full route.\u003c/p\u003e\n\u003ch2 id=\"photos\"\u003ePhotos\u003c/h2\u003e\n\u003cp\u003eHigh resolution versions of the photos in the book can be found here (in order of appearance):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"Oosterscheldekering.jpeg\" title=\"Oosterscheldekering\"\u003eOosterscheldekering\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"Lemur.jpeg\" title=\"Lemur\"\u003eRing-tailed lemur\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"LoomingWeather.jpeg\" title=\"LoomingWeather\"\u003eLooming weather\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"Highlander.jpeg\" title=\"Highlander\"\u003eHighlander\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"Cupola.jpeg\" title=\"Cupola\"\u003eCupola\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"Valkenburg.jpeg\" title=\"Valkenburg\"\u003eValkenburg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"Boar.jpeg\" title=\"Boar\"\u003eBoar\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"Dunes.jpeg\" title=\"Dunes\"\u003eDunes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"MultitoolBlades.jpeg\" title=\"MultitoolBlades\"\u003eMultitool Blade Comparison\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"Multitools.jpeg\" title=\"Multitools\"\u003eMultitools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"Knives.jpeg\" title=\"Knives\"\u003eKnives\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"PlompeTower.jpeg\" title=\"PlompeTower\"\u003eView from the Plompe Tower\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"Flashlights.jpeg\" title=\"Flashlights\"\u003eFlashlights\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"contact\"\u003eContact\u003c/h2\u003e\n\u003cp\u003eMultiple contact options are listed on the \u003ca href=\"/\" title=\"Home Page\"\u003ehome page\u003c/a\u003e.\u003c/p\u003e","title":"Travelin' The Netherlands"},{"content":"Need to go somewhere? The first thing most people do is getting out their phone and punch in the destination address into something like Google Maps. You get step-by-step driving directions and can even view the destination in Google Streetview to get some impression of what to expect once you get there.\nI still remember the time when my dad bought our first car navigation system. It was a “TomTom” which was manufactured by a Dutch company with the same name. This little device brought us much joy and saved us a lot of trouble by taking us directly where we needed to be. I still remember when it instructed us to take a ferry while we were on vacation. This might not seem so special at first hand, but as a young boy, it felt epic.\nTools like Google Maps or Apple Maps are useful when planning a simple trip with the car, but are often lacking when you try more complex things. I like to walk and ride my bike in my free time. I created my first walking route in Google Maps. I would then walk the route and periodically check my phone to ensure that I was still on course. This approach worked but wasn’t ideal.\nMy phone at the time didn’t have the best magnetic compass and GPS receiver. It always took some time for the phone to get a proper location lock and there were more than enough times when the compass pointed me in the wrong direction, requiring me to backtrack a part of the route. Google Maps also limited the amount of manual changes I could make to a route so I could never get them exactly how I wanted to.\nI was getting quite upset with these limitations and did what I always do in such cases: Throw money at the problem. I bought myself a Garmin GPSMAP 66s navigation device. In hindsight, I could have gone for a cheaper model like the Garmin eTrex and still be fine. I was however too afraid to miss out on any features I might need.\nSince then me and my GPSMAP were inseparable on my walks. It’s the first thing I reach for when it’s “Walking Time” or “Walking o’clock”. Later on, I also bought a Garmin Edge Explore for my biking trips and a Garmin DriveSmart for my car trips.\nIt did however take some time for me to get used to using these products. The Garmin ecosystem can be quite complex. My GPSMAP didn’t even have a map installed on it when I got it. I therefore wanted to dedicate an entire blog post to explaining how all this stuff works. This post is therefore an interesting read for people who find products like Google Maps too limiting and want something more in order to properly plan a vacation or road trip.\nBasic terminology Let’s discuss some basic terminology before we proceed any further:\nWaypoint; A waypoint is a point of interest. It’s something you may want to visit. A waypoint is essentially a set of GPS coordinates with some extra information like an address, phone number or website link. Each waypoint is displayed on the map with an icon (usually a flag). Trail; A trail consists of a list of GPS coordinates. You have to follow these coordinates one by one. It helps to see the coordinates as breadcrumbs. Trails can be created by hand but are usually recorded by a GPS device of someone who walked the trail before you. You are therefore walking in someone else’s footsteps. Trails are quite static and difficult to edit. They are used when following a precise path to a destination is important. Route; A route is calculated between two or more waypoints. Your GPS device will calculate the route by using the map it has installed. Routes are quite dynamic and can be recalculated at any time. They are used in situations when visiting certain spots is important but you don’t particularly care how to get there. Activity; This is Garmin’s version of a trail. A trail is just a set of coordinates while an activity can also include data like your hard rate. Course; Again, this is just Garmin’s version of a route. GPX-file; A file containing waypoints, trails and routes. You will stumble upon these files when you try to download trails and routes from others on the internet. All these files have the ‘.gpx’ file extension and can be imported into your route planning software or directly copied to your device. You can also export your own routes and trails and share them with others. Garmin services Garmin offers different services and software products. Each of them has a different purpose:\nGarmin Connect; Service focused on sports and activity. Can be used to keep track of your Walking, Biking, Swimming, Fitness and Running activities. You can also use this service for creating routes. Routes can be sent to your Garmin device through your Smartphone. Your Garmin device will sync your activities with your phone. You can use Garmin Connect by installing the App on your Smartphone but you can also use the web interface. Garmin Express; Application used to update your Garmin devices. Only available for Windows and macOS. Although Garmin Connect can to send updates to connected devices, Express is the most reliable way to do it. Especially Map updates can better be done through Garmin Express since they can be quite large. The application can also be used to sync your device with the Garmin Connect service. This is a nice option for people who don’t own a Smartphone but do want to use the Connect service. Garmin Explore; Service focused on Hiking. It’s like a remote control for your Garmin device. You can use it to create routes, keep them in different collections and sync them to your device. Garmin Explore is available as a Smartphone App but also has a web interface like Garmin Connect. Garmin Basecamp; Basecamp is an application you can install on Windows or macOS, just like Garmin Express. Basecamp allows you to manage your waypoints, trails and routes and sync them with your devices. It’s an older application, but it’s the only one that covers just about anything. I also like the fact that it runs on your own system so you are now dependent on an internet connection. You can only sync with your devices with a USB cable while the other services rely on a Bluetooth connection and a Smartphone app. Using a cable is more cumbersome, but in my experience far more reliable. You can download Basecamp from the Garmin website. I am pretty disappointed with the fact that Garmin isn’t putting any effort into Basecamp anymore because there isn’t a good alternative for it. The Connect service is more focused on health and sports rather than planning trips. Explore does seem to be somewhat like Basecamp, but it’s solely focused on hiking and still lacks many features.\nI also have a bit of a problem with the phone-centric nature of the services. Why would I plan a route on my smartphone when I have a 24-inch monitor in front of me? It’s nice that you have the option to, but these are not things you do in the field. You do them at home in front of your desk in the comfort of a warm cup of tea.\nAnd sure, both Connect and Explore have web interfaces so you can do the work from your computer if you want to. Web interfaces will however never beat the performance of installed applications. I need something fast, responsive and reliable. The Garmin web interfaces just aren’t up to the task.\nI will focus on Basecamp for the rest of this post. Just know that there are other options out there.\nGarmin devices From left to right, top to bottom: Gpsmap 66s, eTrex SE, Drivesmart, Edge Explore\nI have already talked about the fact that I have several Garmin devices in the introduction of this post. I have a GPSMAP 66s and an eTrex SE for my walks, an Edge Explore for my bicycle rides, and a Drivesmart for my car rides. I will use this section to describe my experiences with these devices and give you an idea of what to expect from them.\nThe GPSMAP 66s This is my first Garmin device. It’s a big bulky beast, but I love it. I used to clip it to my backpack with the Carabiner attachment that came with it. I later upgraded to the Backpack Tether so I could detach the device more easily.\nThe GPSMAP is a device that can do just about anything. You can record your trails and use it to create routes and waypoints. It also comes with a calculator, alarm clock and stopwatch. The device has a built-in LED flashlight. You can use it to light up your surroundings or call for help as it can send an SOS in Morse code.\nThe device is however more difficult to carry than something like a Garmin eTrex 30. You can’t just slide this thing into your coat pocket. You have to carry it on your belt with the Carabiner or the clip attachment. You can also strap it to your backpack with the tether attachment.\nInfo\nYou might want to buy the NiMH Battery Pack for the GPSMAP if you want to change your device with a charging cable. It’s better than having to swap out AA batteries all the time. The device will last about 16 hours on one charge.\nInstalling Openstreet maps on your GPSMAP The GPSMAP is delivered without any maps installed on it. You can buy maps from Garmin and install them through Garmin Express. The most popular option is however to install the Openstreet maps on the device. This is the preferred choice because it is free.\nFollow the following steps to install maps on your device:\nDownload the maps you need from one of the following websites: Userbeam Alternativaslibres Freizeitkarte Connect your Garmin device to your PC with a USB cable. Your device should show up as a detachable storage device on your PC. Ensure the files you have downloaded have a ‘.img’ file extension. You might need to unzip a downloaded file if it has a ‘.zip’ file extension. Files with the ‘.gmap’ file extension are for Garmin Basecamp and are not suited for the device itself. Copy the img file to the ‘garmin’ folder on the device. Create the folder if necessary. Safely detach the device. Turn the device on. Go to the “Setup” menu from the main menu. Select the “Map” menu Select the “Configure Maps” option Enable all the maps you need to use by using the toggle switch You can also enable and disable maps from the map overview:\nPress the “MENU” button on the device Select “Map Setup” Select “Configure Maps” Info\nMany Garmin devices have a Micro-SD extension slot. You can copy the maps to the card and insert it into your device. This is useful if the internal storage isn’t large enough to hold everything. Ensure the maps are placed in a folder called ‘garmin’.\nSetup your GPSMAP for car driving As said before, the GMSMAP is a device that can be used for all kinds of activities. The device comes preinstalled with different profiles. You have profiles for Hiking, Cycling, Mountainbiking, Hunting, Fishing, Climbing and Geocaching. The is no profile for car/motorcycle driving, however. Luckily, you can create your own custom profiles.\nFollow these steps to create a custom profile for car or motorcycle driving:\nGo to “Setup” from the main menu. Select “Profiles”. Select “Create profile”. A new entry will be added to the end of the profile list. The name is something like “profile 8”. Select this entry and use the “Edit Name” option to set a proper name for this profile. Something like “Car driving” or “Motorcycle driving” will do. Go back to the setup screen and open the “Routing” menu Select the “Activity” option and then select the proper activity from the dropdown menu. Select “Automobile Driving” or “Motorcycle Driving”. Go back to the setup screen and open the “Map” menu. Select the “Orientation” option and select “Automotive Mode” from the dropdown menu. Go back to the setup screen and open the “Recording” menu. Select the “Activity Type” option and select “Other” from the dropdown menu You are now set! You can switch profiles in the “Profiles Change” menu located in the main menu. The device won’t give you spoken directions because it is not equipped with a speaker. It will however make beeping noises whenever it needs your attention.\nI prefer a separate device such as the Garmin Drivesmart for my car rides, but the GPSMAP can be a good backup option.\nThe Edge Explore The Garmin Edge series are navigation systems for cycling. The normal Edge is more focused on sports activities while the Edge Explore is more focused on exploration (as the name suggests).\nIt’s important to know that the normal edge only supports navigating configured routes that get sent to it through Garmin Connect of Basecamp. You can’t just punch in and address and go. The device doesn’t come with a touchscreen. You have to control it with buttons on the side. The Edge Explore does support this (and comes with a touch screen).\nThe Edge Explore comes preinstalled with maps, so you don’t have to install them yourself like with the GPSMAP. It works just like any other navigation device. You can give it a destination you like to go to or select a route you have created with Connect or Basecamp.\nThe device can also generate a route for you. You tell it in which direction you like to go (North, East, South or West) and how long the route needs to be. It will then give you around three possible options. Pick one option and cycle away.\nI don’t have too many complaints about the Edge Explore. It does what it does and is quite reliable (for a Garmin device). My old big frustration is that the device is slow with calculating routes. It can sometimes take 3 to 5 minutes to calculate a route (I do have the older 2019 model though). It also does the calculation twice under certain conditions.\nWhen you start a route and you are not near the starting point, the device will kindly offer to give you directions to the start of the route. If you accept this offer it will continue calculating the whole route. Once you arrive at the starting point, it will start calculating the whole route again. This is just unnecessary.\nThe Drive(smart) The Drivesmart is Garmin’s car navigation. The product comes in two flavours the Drive and the Drivesmart. What makes the Drivemart so much smarter than the regular Drive you might ask? Nothing much really. The Drivesmart just has more connectivity options.\nThe Drivesmart can connect to your phone over Bluetooth and has built-in WiFi. It allows you to make handsfree calls and distracts you with notifications from your phone while you drive. The device can also connect to your local home network and use it to download map and firmware updates.\nI think the Drivesmart is an alright device. I think it’s better than the Tomtom navigation system my mother uses. The device is equipped with Garmin’s special screen technology which means that the screen is clearly readable in direct sunlight. It also has a small befell as well, which gives it a modern look.\nThe thing that Garmin did really well is the user interface design. You can clearly see a big difference with Tomtom here. You see, Tomtom decided to make their interface look like a Powerpoint presentation. And I don’t mean those corporate ones where they just paste walls of text on each slide and basically just use it as a word processor.\nI mean the ones most teenagers make when they have to present about a certain topic in front of their class. You know, those filled to the brim with animations. Every slide, every picture, every bullet point. It all has to be animated! And don’t forget the silly sound effects too!\nI think the clearest way to prove my point is to compare the (virtual) keyboards of both devices:\nAs you can see, the Garmin keyboard is simple but practical while the Tomtom keyboard is stylish but less practical. The buttons are smaller, making it difficult to put in a destination. I also think the transparent interface of Tomtom is stylish but too distracting.\nI like how the Drivesmart has a built-in route editor. You can send routes to the device by using Basecamp but also create and edit routes on the device itself. I think this is great since I use Basecamp to create all my routes but also regularly be the editor to do last-minute adjustments.\nThere is one last thing before I shut up about the Drivesmart: I really love the Trip Advisor integration and the ability to quickly find a parking spot. The people at Garmin understand that you can’t drive your car straight through the building entrance and have to leave it at a parking lot and enter the building on foot.\nWhenever you select a destination on the Drivesmart, there is also the option to navigate to a parking lot close to the destination instead. You simply press the “P” button and the device will present you with a list of possible places where you can leave your car. Why don’t other navigation solutions like Google or Apple Maps have this? It saves you so much effort.\neTrex SE The eTrex SE is a relatively new device in Garmin’s lineup. Don’t make the mistake of confusing it with de regular eTrex 22x or 32x. It’s a different type of device. You see, Garmin figured out that most people already have a screen where they can view maps on, it’s their smartphone. So why would their devices also need a good screen while people can just configure everything on their phones and send all the relevant information over via Bluetooth?\nAnd this is how the eTrex SE was born. It’s a small device with a simple black-and-white display. It has no maps installed and will simply display your route as a black line on a white background. You can pair the device with your phone and control it through the Garmin Explore app. Here you can view your location on a map and send trails to the device.\nIt is important to know that the eTrex SE cannot fully function on its own. It relies on a connection with a smartphone.\nI bought the eTrex SE because I was looking for something less bulky than the GPSMAP. I wanted something that I could take with me on shorter walks. Maybe something like an activity tracker.\nBut honestly, I don’t know what to do with it. The tracking of my daily walks around the block didn’t go so well because the device does not report how many calories I have burned. Both the GPSMAP and Edge Explore do this but the eTrex SE just keeps it blank.\nThis is no fun when you use something like the Apple Health app to track your daily calorie burn. It’s like the walk was for nothing. I just ended up relying on the step counter of the iPhone.\nSo it’s not suitable as an activity tracker. Maybe I can use it for city navigation? The GPSMAP is an expensive device. It might be pulled from my hand at an unguarded moment. Maybe it’s smarter to walk around with a cheaper device.\nIt sounded like a good plan but I prefer to use the GPSMAP in cities. It’s just nicer to have a detailed map of the city on your screen and it’s easy to look up someplace to eat and turn-by-turn instructions on how to get there without having to get out your phone.\nThe whole fear of theft was also solved when I bought the tether attachment. Someone can grab the device from my hands, but it will still be connected to my backpack with the tether.\nIf you are contemplating on buying an eTrex and you can’t decide between the SE and 22x/32x: Buy the 22x or 32x, preferably the newer 32x because it has an electromagnetic compass.\nI understand Garmin’s reasoning for developing this device, but it just offers too little. Or maybe I have just been too spoiled by the GPSMAP, who knows? You might like the SE if you really want something minimalistic or just need a backup device in case your main device breaks down.\nMy experience in general Garmin devices certainly don’t lack in functionality. They offer just about anything you will ever need and more (except for the SE). The thing that does bother me is the reliability of Garmin’s products. The devices all have a tough exterior on the outside but I have had my fair share of problems with what’s inside of them.\nI have come to like my GPSMAP, but you have to know how to avoid the software bugs. My first problem was the screen power save option bug.\nThe device has an energy-saving option where it will power down the screen instead of just dimming it after a configured timeout. You wake the device up by pressing the power button. Sounds convenient right? Yes, this feature helps with conserving power, but it also has a chance to freeze up the device. You then have to force a restart by holding down the power button. The device will reboot and function again, but you will lose a part of your activity recording.\nAnd this is just one example. Other problems include:\nThe battery indicator being wrong. The device would indicate that the battery was almost empty while it was almost fully changed. I had this with the Edge Explore and the GPSMAP with the Garmin battery pack. The battery percentage would just drop from 80 to 30 percent for example. The road to follow isn’t highlighted. Had this problem with the Drivesmart. The device would still give text and voice instructions, but the road to follow wasn’t highlighted on the map. Synchronization issues with Garmin Connect. I have this problem the most with the GPSMAP. Synchronization either doesn’t work or is very slow. Killing the Garmin Connect app and opening it again usually solves it. I have had issues where the GPSMAP would just stop recording the route. Especially when I take a wrong turn somewhere and have to backtrack. It will just draw a straight line from where I left the trail to where I stopped the recording. The Drivesmart has a weird habit of sending me in a certain direction and then telling me to turn around. It happens at intersections. It will for example tell me to take a left, tell me to turn around and take another left when I arrive back at the intersection instead of just telling me to go straight ahead. I have had issues where the Drivesmart sends me to the previous waypoints instead of the next waypoint when I decide to use the skip waypoint feature. These issues can be frustrating to deal with, especially when you are on the road. It’s also not something you expect. One of the main reasons I buy dedicated devices is because I need better reliability than a smartphone can offer.\nNevertheless, I still think dedicated devices for certain activities are preferable over just using your smartphone. I tried using my phone for cycling navigation in the beginning and it just didn’t work out.\nThe screen of the phone jumped to full brightness because the sun was shining directly on it. Garmin uses a different screen technology than your usual smartphone. The screens of their devices are properly readable even under direct sunlight. They also don’t radiate light as smartphone screens do. This makes these screens easier on the eyes.\nIt’s also way more convenient to use a dedicated device for walking or hiking trips. You don’t have to take your phone out of your pocket every time you want to know if you are still on track. You can just slap this brick onto your backpack strap and it will beep at you when you go the wrong way. You also don’t have to worry about rain or sand and you can easily swap batteries if needed.\nUsing Basecamp As explained earlier, Basecamp is the tool you want to use if you mean business. Sure, Garmin Connect and Explore can do some things for you but Basecamp has it all. I use it for managing car trips and hiking trails. I also use it to keep track of interesting places I want to visit.\nBasecamp is a useful tool to use but can seem a bit complicated when you first start out. This section is dedicated to explaining how to set up and use this piece of software.\nWhen you start up Basecamp, you will be presented with a main window composed of four panels. The right panel displays the map, the top left panel displays any devices which are connected to your system, the middle left panel shows you the directory structure and the bottom left panel shows you all the objects which are in the selected folder. You will also see a toolbar at the top of the window with a collection of buttons.\nObjects like routes, trails and waypoints are kept in itemlists. These itemlists can then be organized by putting them in folders. You can have a folder for all your walking routes and another one for all your car routes for example. It is recommended to create a new itemlist for each trail or route so you can easily separate them.\nAs you might have noticed, Basecamp only comes with a basic map preinstalled. You will need to install more detailed maps if you want to make full use of the application.\nYou have two options:\nInstall a Garmin map Install an Openstreet map Installing Garmin maps on your local system This most logical choice is to install a more detailed map from Garmin. Some Garmin devices allow you to use their installed maps within Basecamp. You can check this by simply connecting a Garmin device to your PC or Mac with a USB cable. Open up Basecamp and check if the device shows up in the top left column, then check if its map shows up in the map menu at the top of your window.\nNote that not every Garmin device supports this. Of all the devices that I own, only the GPSMAP and the Drivesmart support this. This is the main reason why I use Garmin Connect for my bicycle routes and Basecamp for my car and walking routes.\nInstall Garmin DriveSmart map on your local system:\nEnsure Garmin Basecamp is closed Connect the device to your PC/Mac Open Garmin Express Select Device Press “mapdetails” Press “options” Press “install on computer” Agree to the terms and conditions The Express software will now download the map to your computer. Wait for the download to finish Close Express Open Basecamp Ensure the proper map is selected (use the Maps menu at the top of your window). You may have to repeat these steps when your Garmin device gets a map update.\nInstalling Openstreet maps on your local system Alternatively, you can install a map based on Openstreet map and use it in Basecamp:\nEnsure Basecamp is closed. Download the maps you need from one of the following websites: Userbeam Alternativaslibres Freizeitkarte Ensure the files you have downloaded have a ‘.gmap’ file extension. You might need to unzip a downloaded file if it has a ‘.zip’ file extension. Files with the ‘.img’ file extension are meant to be used on Garmin devices and are unusable by Basecamp. Simply double-clicking on the gmap file should be enough to install it. Startup Basecamp again. Select the newly installed map in the Map menu at the top of the window. The map should now be displayed in the right panel. Creating your own (road)trip After all the explaining, reviews and setup instructions, we can finally proceed to the main topic on this post: “How do you actually create your own trips”. Well, it’s quite simple.\nFirst, you look for interesting activities or stops and create a waypoint for each one. Then you select all the waypoints you want to include in your route (you can do this by selecting waypoints in the bottom left panel while holding the Control/Command key). Right click on the selected waypoint and select the “Create route from waypoints” option in the context menu.\nA new route object will be added to the selected itemlist and a route edit window will pop up on your screen. This window will list all the waypoints which are included in the route. You can change the order by simply dragging waypoints up and down the list. You can also add additional waypoints by dragging them into the list from the object panel.\nWarning\nEnsure that you have the right activity selected for your route. You view and change the activity type in the right top corner of the route window.\nAs a finishing touch, you can change the route by making some small edits. Normally, basecamp and your GPS will calculate the quickest route to the next waypoint. But there are times when you want to force it to take a different route. You can do this by dragging a part of the route to a road you want to force it to use. This will cause Basecamp to create a new waypoint and add it to the route. You won’t see this waypoint in the object panel but it will be present in this list of waypoints in the route window.\nWarning\nIt is recommended to silence waypoints you don’t plan to stop at. You can do this by right-clicking on a waypoint in the route window and selecting the “Don’t warn at arrival” option. This will grey out the waypoint and add the “(no warning)” postfix to it.\nIt might not seem like much but this will save you a lot of problems where your GPS will stubbornly try to force you to turn around because you didn’t pass this point. Silenced waypoints are not announced by your GPS when you pass them, they are seen as optional. Your GPS won’t make a fuss when you don’t pass them will simply send you to the next point on the route.\nYou also have the ability to import the waypoints, routes and trails of others. This information is distributed in the form of GPX files. Use the import option from the File menu to import objects from a GPX file into the currently selected itemlist.\nUsing routes instead of trails As discussed earlier: A route is a calculated path of travel between waypoints while a trail is just a long list of coordinate points that you have to follow one by one. Routes are in my opinion the preferred choice in most cases because of the following reasons:\nRoutes are easier to maintain since they are freshly calculated in the most current map data. Routes are easier to edit. You can easily customize a route to your liking by adding and removing waypoints. Routes are more dynamic. Your GPS can recalculate an alternative route when you miss your turn or a road is closed. Trails are static, you have to figure out an alternative route for yourself. You will get turn-by-turn instructions from your GPS when following a route. My GPSMAP with beep once when a turn is coming up and will play a different tone when it is time to take the turn. It won’t do this when following a trail. It will beep once if you are off-track and once again when you are on-track. I only see trails as a valid option when you are not following a mapped road. They are too high maintenance and inflexible for anything else.\nIt is therefore beyond frustrating to see just about everyone share their work as trails. Although I can understand using them for hiking trails, I have seen people use them for things like road trips as well. You don’t want to be in a situation where you are in a car or on a motorcycle and only have a dotted line to follow.\nYou need to know which turns or freeway exits to take far in advance, so you have time to make the proper preparations. You will get this with routes but not with trails. You also don’t want to get into situations where you have to pan around on a map to find an alternative route because a part of the trail is not accessible anymore. It’s not always easy to find a safe spot to park. You want your GPS to quickly provide you with an alternative route.\nIf using a route in favor of a trail is preferable, then why are people not using them? You so often see situations where some dude (or dudette) jumps into a car, presses the record button on their GPS, drives the route and uploads the resulting recording. Why go through so much effort for so little result?\nThese recorded trails also have the additional problem of being inaccurate. This is because GPS devices don’t record your location with pinpoint precision, so the trail points don’t always align with the road. You also have the occasional connection loss. This can cause a trail to miss several coordinate points and can make it unclear which turns were made.\nI often end up having to recreate the trail as a route. Basecamp does have an option to convert trails to routes, but these converted routes don’t behave the same way as normal routes. They are static and can’t be edited and changed as normal routes can. These converted routes are basically “Trails in disguise”.\nSo, if you are planning on creating and sharing your favorite hiking trails and road trips, please use routes instead of trails! You can ways include both of course, but routes are so much more useful when following mapped roads and paths. Just create the waypoints and let the GPS figure out how to get there.\nClosing words Wait? You actually managed to read everything up to this point? All my jabbering about different devices and the whole Route vs Trails discussion didn’t turn you away? Good for you! Don’t forget to congratulate yourself for reaching your daily reading quota.\nI truly hope this post will help people with planning more complex trips, where you are not simply dealing with a drive from A to B. Also, know that you are not required to use Garmin devices and software to achieve this. They are the biggest player out there, but there are alternatives.\nYou can use QMapshack as an alternative for Garmin Basecamp and can use a mobile app like Osmand to navigate on your phone instead of using a dedicated device.\nNow go out there and explore!\n","permalink":"https://www.vharmers.com/posts/trip_planning/","summary":"\u003cp\u003eNeed to go somewhere? The first thing most people do is getting out their phone and punch in the destination address into something like Google Maps. You get step-by-step driving directions and can even view the destination in Google Streetview to get some impression of what to expect once you get there.\u003c/p\u003e\n\u003cp\u003eI still remember the time when my dad bought our first car navigation system. It was a “TomTom” which was manufactured by a Dutch company with the same name. This little device brought us much joy and saved us a lot of trouble by taking us directly where we needed to be. I still remember when it instructed us to take a ferry while we were on vacation. This might not seem so special at first hand, but as a young boy, it felt epic.\u003c/p\u003e","title":"Trip planning with Garmin"},{"content":"This post is part of a larger series. You can find all posts over here.\nSetting up systems can be a lengthy and boring process. It is easy to forget a step, execute it in the wrong order or use the wrong settings. I still remember the day when I had to reinstall the Operating System of my laptop on a yearly basis.\nMicrosoft Windows has a tendency to become slower over time. Installing all kinds of software like games and Integrated Development Environments (IDEs) such as Visual Studio and Netbeans also didn’t help. Cleaning tools like CCleaner and Smart Defrag only got you so far. Sometimes the only thing left to do was to reinstall the OS and start fresh.\nThe most annoying part of this process was the installation of the needed applications and their configurations. I had to set the system up how I liked it. “Wouldn’t it be great if could just have a list of applications and settings I could feed to the computer and let it do the heavy lifting for me” I often thought. Little did I know that making these kind of lists would be a large part of my future job.\nOne of the big problems with manually setting up and managing systems is what I would call “system rot”. Changes, like adding and removing users or software or making configuration changes, accumulate over time. It is not always clear who made the change and what its purpose was.\nIt also makes it difficult to recreate a system because it is unclear which changes need to be applied to a base system in order to get the system you had. It’s like assembling a piece of IKEA furniture with no manual. You only get a picture of the already assembled product.\nThis becomes an especially large problem when a system is infected with malware. Trying to remove the malware may be an option but you never if there might be remnants left after the removal attempt. This can cause systems to get reinfected.\nYour second option might be to bring the system back to an uninfected state by restoring a backup. It isn’t always clear when a system got infected however. It would be difficult to determine how far you have to go back to find a clean backup. It isn’t uncommon for attackers to have access to the systems of their victims for months or even years. So you might not have any clean backup to restore.\nThe solution to these problems is to keep track of all changes with a system configuration management tool. This allows you to detect and revert unauthorized changes to a system. There are multiple solutions out there but I have chosen Ansible for this blog post since it is the tool I have the most experience with.\nManaging Systems with Ansible Ansible is an automation solution originally developed by Michael DeHaan and acquired by Red Hat in 2015. The tool is written in the Python programming language and heavily relies on YAML and Jinja2.\nYAML stands for Yet Another Markup Language and is, as the name suggests, a markup language. Markup Languages can be used to write documents that are easy to read for both humans and machines. Other popular languages are XML and JSON. I created a shopping list application, which saves the shopping list in the JSON format, as part of my Python101 tutorial. You can check it out over here.\nJinja2 is a templating engine written in Python. It allows for the use of variables and other functions in Ansible YAML files and system configuration files. Templating is great because it allows you to reuse parts of your code so you don’t have to repeat yourself.\nThere are some Ansible-specific terms you need to know before we can proceed:\nInventory; This is where information about all your Ansible managed systems is stored. The inventory essentially tells Ansible where your systems live. Systems (or hosts) can be organized in groups and configuration can be applied at either host or group level. Task; An action which is carried out on a system. A task could be anything. The creation of a directory or user account, the installation of a software package or the creation of a configuration file. Tasks rely on modules to actually execute the action. Module; Modules are used by tasks to do something, like copying a file. Ansible has a set of builtin modules, but there are also a lot of third-party modules. Ansible’s builtin modules all have the ansible.builtin prefix. Examples include ansible.builtin.copy and ansible.builtin.user. Role; A collection of related tasks. A role can be a collection of tasks for installing and configuring an Nginx Web Server for example. A system or group of systems can have multiple roles assigned to it. Play(book); A play or playbook is essentially a file that defines which Roles should be executed on which systems or groups. There are some other terms that are not mentioned above, but I will introduce them later on. Let’s first look at the smallest element in Ansible:\n- name: Ensure user John Doe exists ansible.builtin.user: name: john.doe groups: - global - accounting - emergency_response The code block above shows the definition of a single task. Each task has a name and makes use of a module to achieve its intended goal. Here we make use of the ansible.builtin.user module to create a user called ‘john.doe’. We also ensure that John is a member of the Global, Accounting and Emergency Response groups. This allows him to access additional files and folders apart from his own private files.\nWe can expand this example by ensuring the groups exist before trying to make John a member of them:\n- name: Ensure the Global group exists ansible.builtin.group: name: global - name: Ensure the Accounting group exists ansible.builtin.group: name: accounting - name: Ensure the Emergency Response group exists ansible.builtin.group: name: emergency_response - name: Ensure user John Doe exists ansible.builtin.user: name: john.doe groups: - global - accounting - emergency_response We now have 4 tasks. 3 for creating groups and 1 for creating a user. We can further optimize the tasks by using loops. This will allow us to merge the 3 group tasks into a single task:\n- name: Ensure groups exists ansible.builtin.group: name: \u0026#34;{{ item }}\u0026#34; loop: - global - accounting - emergency_response - name: Ensure user John Doe exists ansible.builtin.user: name: john.doe groups: - global - accounting - emergency_response The new group task will execute the ansible.builtin.group command for each item in the loop list. The {{ item }} placeholder will be replaced with the name current item during a playbook execution. This optimization saves us from having to create tasks for each group we want to create.\nWe now have two tasks we like to run on our systems. Let’s take a look at how we can put these tasks in a role.\nRole structure An Ansible role starts with the following directory structure:\nvharmers.template/ ├── LICENSE ├── README.md ├── defaults │ └── main.yml ├── files │ └── template.bash ├── handlers │ └── main.yml ├── tasks │ ├── configure.yml │ ├── install.yml │ ├── main.yml │ └── validate.yml └── templates ├── template.conf.j2 └── template.service.j2 The figure above shows the directory structure of my own template role. I use this role as a template for creating new roles. The README.md and LICENSE files should be self-explanatory but from there on things start to get interesting:\nDefaults; This folder contains the default variables of this role. These variables can all be overridden in the inventory. I will explain more about variables and the inventory in later sections. Files; This is the location where you put the files you want to use in your role. These files can be anything. You will be able to refer to these files within your tasks. The files in this folder are usually just copied to the target host by using the ansible.builtin.copy module within a task. Handlers; Are special tasks that are triggered by other tasks and run after the normal tasks have been executed. Handlers are used in scenarios where an action only has to be taken when a normal task actually introduces a change in a system. Most popular use cases include the restarting of a service when its configuration file has changed. Tasks; This is where the magic happens. This folder contains the tasks that need to be executed for this role. You can put all of your tasks in a single file but since roles can include a lot of tasks, it is recommended to pull related tasks into separate files to keep things structured. Templates; This folder contains the Jinja2 templates used by the role. These templates can be used the create things like configuration files. Using variables and templates Variables allow us to refer to a value by using a name. Think of it as a shortcut or a reference. A role contains a set of default variables. The values of these variables can be overridden from the inventory. It is easiest to explain by showing an example:\ndefaults/main.yml --- groups: - global - accounting - emergency_response users: - john.doe - jane.doe tasks/main.yml --- - name: Ensure groups exists ansible.builtin.group: name: \u0026#34;{{ item }}\u0026#34; loop: \u0026#34;{{ groups }}\u0026#34; - name: Ensure users exists ansible.builtin.user: name: \u0026#34;{{ item }}\u0026#34; groups: \u0026#34;{{ groups }}\u0026#34; loop: \u0026#34;{{ users }}\u0026#34; The example above shows the contents of two files (defaults/main.yml and tasks/main.yml). default/main.yml defines two variables called groups and users. The groups variable holds a list of all the groups we need and the users variable holds a list of users who need an account on our systems.\nThese two variables can be used in the tasks/main.yml file to refer to the group and user lists. If we want to add our users to a new group then we can simply add the group to the groups list. This saves us the trouble of having to add the new group at two locations.\nVariables always need to be enclosed with four brackets ({{ groups }}). The brackets tell Ansible, or rather Jinja2, that group is a reference to a variable rather than a normal string. We also need to add quotes to indicate the contents have special meaning and need to be interpreted with Jinja2 which in turn will recognize the variable and replace it with whatever it points to.\nVariables can also be used in templates. Templates are stored in the templates folder. All templates have the “.j2” file extension (j2 is shorthand for jinja2). Here is an example of a template file:\n{% if length(groups) \u0026gt; 0 %} This system has the following groups: {% for group in groups %} - {{ group }} {% endfor %} {% endif %} {% if length(users) \u0026gt; 0 %} This system has the following users: {% for user in users %} - {{ user }} {% endfor %} {% endif %} The template contains some elements that are enclosed with brackets and percent signs ({% ... %}). These differ from the {{ … }} blocks that are used for printing the value of a given variable. The {% ... %} blocks are used for special instructions.\nAt first, we check if the group variable contains any elements. We do this by using the {% if length(groups) \u0026gt; 0 %} statements which roughly translates to “continue if the length of the groups list is greater than zero”. Jinja2 will continue parsing the template if the statement is true. Otherwise, it will skip directly to the {% endif %} block and continue from there.\nThe next thing would be the {% for group in groups %} statement. This simply means: “repeat for every element in the groups variable”. This statement will first retrieve the first element from the groups list, store it in the temporal group variable and continue until it stumbles upon the {% endfor %} block.\nIt will then jump back to the for statement where it will now take the second element in the list, writes its value to the group variable and continues again until it gets to the {% endfor %}. This loop is continued until all the elements in the groups list have had their turn.\nThen we do the same thing for the users variable. Parsing this template with Jinja2 will give you the following result:\nThis system has the following groups: - global - accounting - emergency_response This system has the following users: - john.doe - jane.doe You can parse and copy templates to the targeted system by using the anisble.builtin.template module. Here is an example of a task using this module:\n- name: Ensure configuration is present ansible.builtin.template: src: template.conf.j2 dest: \u0026#34;{{ template_config_dir }}/template.conf\u0026#34; owner: \u0026#34;{{ template_user }}\u0026#34; group: \u0026#34;{{ template_group }}\u0026#34; mode: 0644 notify: Restart service This task takes the template file template.conf.j2 parses it and copies the result to a file called template.conf located in the configuration directory on the targeted system. It then ensures the file has the right owner, group and permissions. The last thing it does is notifying the Restart service handler tasks which in turn will restart the appropriate service when all other tasks have been executed.\nInventory Your inventory is simply a list of systems you want to manage with Ansible. You can put all your systems in the same inventory but you can also spread out your systems over multiple inventories. I personally prefer to have separate inventories for testing and production systems.\nInventories can be structured in either the INI or YAML format. Here is an example of an INI inventory:\nfiles.example.com [webservers] web1.example.com web2.example.com web3.example.com [databases] db1.example.com db2.example.com [proxies] proxy1.example.com proxy2.example.com [firewalls] firewall1.example.com firewall2.example.com The example above shows five groups with each group having one to three members. There is also one system which doesn’t belong to any group. Here is an example of the same inventory but then formatted in YAML:\nungrouped: hosts: - files.example.com webservers: hosts: - web1.example.com - web2.example.com - web3.example.com databases: hosts: - db1.example.com - db2.example.com proxies: hosts: - proxy1.example.com - proxy2.example.com firewalls: hosts: - firewall1.example.com - firewall2.example.com You are free to choose which format to use. I would however advise you to choose and stick with one format.\nOnce you have your inventory you can define your playbook. Here is an example playbook:\n- hosts: all roles: - common - hosts: webservers roles: - apache2 - hosts: databases roles: - mariadb - hosts: proxies roles: - tinyproxy - hosts: firewalls roles: - nftables A playbook is simply the glue between the inventory and the roles. It defines which roles should be executed on which systems. The apache2 role is executed on all systems in the webservers group for example. The ‘all’ pattern is used to select all systems in the inventory so the ‘common’ role is executed on all systems.\nThe default variables for the systems in the inventory can be overridden in the playbook by adding a ‘vars’ section like this:\n- hosts: databases roles: - mariadb vars: mariadb_user: admin mariadb_password: password Note that variable names are often prepended with the name of the role they belong to. This is because all roles share the same variable space. This means that roles will override each other\u0026rsquo;s variables if they use the same variable names.\nA more proper way to override variables is by putting the variables in separate files. You can make folders for each group and create a file called ‘main.yml’ in each folder. Then you can put the override variables in these main YAML files. You need to create the folders in the same directory where the inventory file is located and the names of these folders need to have the same name as the groups you want to override the variables for.\nInstalling Ansible As mentioned earlier, Ansible is written in Python. You therefore will need a Python interpreter installed. Most Linux distributions already come with Python version 3 preinstalled. macOS also has Python installed by default but it is the older version 2. It is recommended to install the newer version 3 through Homebrew:\nbrew install python3 python3-pip Python comes with its own package manager called ‘pip’. You can use it to install Ansible:\npip3 install ansible Some distributions also offer Ansible as a package. You can also install Ansible directly with Homebrew for example:\nbrew install ansible It is hoverer recommended to stick with one strategy. Installing Ansible with the systems package manager as well as pip will end up confusing your system since the same application has been installed twice.\nAnsible is also not available for the Windows Operating System although there is a Python interpreter available for Windows. The application will not run on Windows because it makes use of functions that are only available on Posix-compliant systems like Linux and macOS. A solution to this problem is to run Ansible on top of Windows Subsystem for Linux or Cygwin.\nUsing Ansible Vault As you can see in the earlier code example, we define a mariadb_user and mariadb_password variable. It’s not the best idea to leave passwords in plaintext because inventory files are often kept in version control solutions such as Git. These solutions are not made with access control in mind. Anyone with access to the repository will be able to see the password and use it to log in on the database.\nA solution to this problem is to encrypt the password with Ansible Vault. This solution is built into Ansible and requires no additional software. Ansible Vault can encrypt whole files or strings of text (inline).\nInline encryption is the easiest. Open up a command prompt and execute the following command:\nansible-vault encrypt_string --ask-vault-password --encrypt-vault-id default The tool will prompt you for a vault password used to encrypt the string and will then allow you to type the string to encrypt. Press Crtl+D when you are done typing the string. Ansible Vault will then print the encrypted multiline string. You can paste this string into your YAML file. Here is an example of what this looks like:\n- hosts: databases roles: - mariadb vars: mariadb_user: admin mariadb_password: !vault | $ANSIBLE_VAULT;1.1;AES256 313764333530363435666238313764343063353461613332623538663134663561 34363532303933393261623863663661310a613739316339346432613639383034 363038396634633261343333316466643366336565373335663065656465323166 61340a633039363737383934363439653932626466366665386362616363363639 6439 As you can see, the value of the mariadb_password variable has been replaced with an Ansible Vault encryption block.\nYou might have noticed that apart from the --ask-vault-password option, we also need to supply the --encrypt-vault-id option with the value of default. Ansible Vault allows you to use multiple separate vaults in your inventory. You can for example have a “production” vault for all the production credentials and a “test” vault for all the test credentials. “default” is the name of the standard vault used by Ansible.\nA similar process can be followed to encrypt a whole file:\nansible-vault create --ask-vault-password --encrypt-vault-id default vault.yml You can edit your existing vault file by replacing ‘create’ with ‘edit’ in the command shown above. It is recommended to use placeholder variables when working with vault files. I will show you the contents of a main and vault file to show you what I mean:\nmain.yml --- mariadb_address: localhost mariadb_port: 3306 mariadb_user: admin mariadb_password: \u0026#34;{{ vault_mariadb_password }}\u0026#34; vault.yml (decrypted) --- vault_mariadb_password: password This way of working allows you to easily see which variables have been configured without the need to decrypt the vault.yml file. Note that the above example shows you the decrypted version of vault.yml. The encrypted version should look something like this:\n$ANSIBLE_VAULT;1.1;AES256 38396432316565653734316563373234653338616561663263343339373933616238373334333331 6663636437616538336663396564393731623966323037340a376363636438346564306536396539 35646637363039383733353132623062306361633937343561343238616338646637353233386434 3130386433346436340a623266653333373366653530343864333632663233313630613137366133 65633065303434356239643566666236613733316536646630643133646636373437376365346462 3331326361633337653934326361656136656239633230303533 Having to copy and paste the vault password into the terminal window each time you need to use Ansible Vault can be quite a pain. It’s also not wise from a security perspective since you could paste the password into the wrong window by accident. A solution to this problem is to use a password script instead.\nAnsible allows you to supply it with a file path where it should read the password from. You can do this by using the --vault-password-file option instead of the --ask-vault-password option. Here is an example of how to do this:\necho \u0026#39;password\u0026#39; \u0026gt; default ansible-vault encrypt_string --vault-password-file default --encrypt-vault-id default You can store the password in a plaintext file but Ansible can also work with script. You can easily create a script that prints the password like the following example:\n#!/usr/bin/env bash pass show infra/ansible/vault@default This bash script loads the vault password from Pass. This solution is safer since the password is not saved in plaintext. Don’t forget to give the file execution permissions otherwise Ansible won’t be able to execute it and will interpret it as a plaintext file.\nUsing Pass with Ansible You can also choose to pull credentials from an external source such as the Pass password manager. You can use this by using a lookup plugin. The pass lookup plugin is shipped with Ansible so there is no need to install any additional software.\nHere is an example of how to use it:\nmariadb_user: admin mariadb_password: \u0026#34;{{ lookup(\u0026#39;pass\u0026#39;, \u0026#39;infra/production/admin@db1.example.com\u0026#39;) }}\u0026#34; You can use lookup plugins with the lookup function. The first argument of this function will always be the name of the plugin you wish to use. The rest of the arguments are passed to the plugin.\nAccessing credentials like this can be useful if you want to have access to credentials from multiple tools. You can for example load the credentials into a Bash or Python script in order to connect to the database to do some maintenance work.\nManaging privileges Making changes to an operating system such as Linux or Windows usually requires administrative privileges. You can tell Ansible for which tasks it should use admin privileges by using the become option. Here is an example of what I mean:\n- name: Ensure that the Python package is installed ansible.builtin.package: name: python3 state: present become: yes The become: yes option instructs Ansible to use admin privileges, also referred to as ‘sudo privileges’ in the Linux world, to install the python3 package since a regular user is not allowed to install packages on a system.\nYou will have to ensure that the user account that is used by Ansible has sudo privileges. This can usually be achieved by adding the user to a certain group. Using the sudo command requires the user password by default on many systems. You can supply this password to Ansible by including the --ask-become-pass switch into your playbook command.\nRunning a playbook I have now explained how to set everything up but you might wonder how to actually execute an Ansible playbook run. You can execute a run with the following command:\nansible-playbook --inventory inventory.ini play.yml Here we tell Ansible which inventory and playbook to use for execution. Your roles should be located in a folder called ‘roles’. There is no option to set the roles path from the commandline but you can set a custom role path by using the ansible.cfg configuration file.\nTo do this, simply create a new file called ansible.cfg in your inventory directory with the following content:\nroles_path = $HOME/Documents/ansible-roles Change the path value to any value you would like. You can configure far more things in the configuration file than you can with commandline options. You can generate a full configuration file by using the following command:\nansible-config init --disabled \u0026gt; ansible.cfg Feel free to use this file as a starting point for your own custom configuration. Remove the semicolon in front of a particular option to make it active.\nClosing words There is much more I can tell you about Ansible but I believe this is enough to get you started. This blog post will be the last post of the OpSec Series. It also acts as a bridge to my next series of blog posts which will focus more on Infrastructure as Code (IaC).\nMy goal with this new blog series is to give people a standardized and structured approach for deploying infrastructure in cloud and on-premise environments. I will mainly explain how IaC tools like Ansible, Terraform and Packer work and how they can be used effectively.\nIt has been about a year ago when I started this blog series and it has been an interesting journey. I often overestimated the time I needed to finish a blog post and always wanted them to be as complete as possible. Writing these blog posts has been a good tool to organize my knowledge and experiences. It is something that I want to continue to do.\nI guess that’s all I wanted to say. Have a good day. See you at my blog post series (or not if IaC does not interest you).\n","permalink":"https://www.vharmers.com/posts/opsec_system_mgnt/","summary":"\u003cp\u003e\u003cem\u003eThis post is part of a larger series. You can find all posts over \u003ca href=\"https://www.vharmers.com/categories/opsec-series/\"\u003ehere\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eSetting up systems can be a lengthy and boring process. It is easy to forget a step, execute it in the wrong order or use the wrong settings. I still remember the day when I had to reinstall the Operating System of my laptop on a yearly basis.\u003c/p\u003e\n\u003cp\u003eMicrosoft Windows has a tendency to become slower over time. Installing all kinds of software like games and Integrated Development Environments (IDEs) such as Visual Studio and Netbeans also didn’t help. Cleaning tools like CCleaner and Smart Defrag only got you so far. Sometimes the only thing left to do was to reinstall the OS and start fresh.\u003c/p\u003e","title":"The OpSec Series - System Management"},{"content":"This post is part of a larger series. You can find all posts over here.\nWe have arrived at one of the most hated parts of security: Authentication. Everyone knows the frustration of having to type in a username and password before accessing the systems you need to do your work. You even need specialized applications in order to keep track of all of these credentials. I sometimes feel like a stamp collector but instead of collecting stamps, I am collecting passwords.\nAnd for a long time, there wasn’t a lot of development in this area. Things have been changing around in this space, however. Technologies like Single Sign-On (SSO) and Multi-factor Authentication (MFA) have gained popularity over the years. There are even efforts being made to eradicate the concept of passwords altogether.\nLet’s take some time to discuss all of these options and look at their pros and cons and discuss what proper authentication should look like without driving your users insane. Before we start however, it’s worthwhile to mention the most common ways attackers break into accounts:\nBrute-forcing Credential stuffing Phishing Malware Abusing recovery methods Brute-forcing is simply trying out passwords until you get the right one. This process is usually not done by hand but with an application such as Hydra. The application will need a list of passwords to try. You can create these lists yourself or use lists compiled by others.\nCredential stuffing also involves tying out passwords but the passwords are taken from leaked user databases of previously hacked companies. These databases are usually sold on dark web marketplaces and contain login information like usernames, email addresses and (weakly hashed) passwords.\nThis information is then used to try to login to other services since people have the tendency to reuse passwords between services. There are services like Have I Been Pwned that allow you to check if your login information has been leaked.\nPhishing is one of the most well-known ways for hackers to obtain login information. The hackers trick non-suspecting users to enter their login information into a fake version of a well-known website such as Twitter or Facebook. These attacks rely on a combination of user habits and emotions like greed or fear.\nSmart hackers put their victims under pressure by adding a sense of urgency. They promise a reward or punishment if a victim acts or doesn’t act within a short timeframe. This forces the victim to act before thinking it through.\nAn attacker can also convince their victims to execute a piece of malware. These “evil” applications are often hidden within other “good” applications or file formats. A popular way is to hide the malware in an Excel Workbook file as a macro.\nInfo\nMalware infections with macros have become less popular because Microsoft software is now blocking them by default.\nMalware can be used to do all sorts of evil stuff. But within the context of this blog post, we are more interested in the credential-stealing capabilities. Malware can log the victim\u0026rsquo;s keystrokes and send them to the attacker. It can also pull login credentials from web browsers or simply search for files called “passwords.docx”.\nThe last method to get access to someone’s account is lesser known but is not to be underestimated. I am talking about a method where hackers use password recovery methods to reset the password to a chosen value.\nMy favorite story regarding this method is the story of how the AOL email account of the CIA director was hacked by a bunch of teenagers. The teens managed to get into the director’s account by resetting his password through the AOL Helpdesk. You can read the whole story over here.\nNow we know how hackers can get into an account, it’s time to take a look at forms of authentication that can make it more difficult for them.\nPasswords Ah, passwords. Probably one of the oldest ways of authentication. Even used before the age of modern technology. Password authentication relies on something only the rightful account holder knows.\nThe NIST Special Publication 800-63 version 1.0 published in 2004 (link) introduced rules for password complexity. On page 52, the author proposed the following password requirements:\nA minimum length of 8 characters (from an alphabet of 94 printable characters) At least one uppercase letter At least one lowercase letter At least one number At least one special character These requirements became the basis for many authentication systems. The author of the publication did come to regret his advice later on. It turned out that humans are not the best at remembering a supposedly random sequence of letters, numbers and special characters. This gets even worse when they are required to change their password every three months.\nIt is now recommended to use passphrases instead. Something like ‘Goats Love To Eat Honey’. These are easier to remember and difficult enough to crack. It is however better to leave the creation of strong passwords up to an application known as a Password Manager.\nPassword Managers A Password Manager is the digital equivalent of the notebook some people use to write down their login credentials. Many of them even have browser plugins so they can autofill the credentials for you.\nYou have some easy-to-use options like 1Password or DashLane but solutions like KeePass or KeePassXC are also available if you want something with more bells and whistles.\nBoth KeePass and KeyPassXC are Open Source and use the same format to store passwords. You can synchronize your passwords across devices by dropping your database file in a Google Drive, Onedrive or Dropbox folder (or whatever cloud storage service you may be using).\nA Password Manager is a ‘must have’ nowadays. There are so many services that require you to create an account. I even needed to create an account to be able to easily update my graphics drivers. Password Managers help you to keep track of them all and will generate a random password for each of those service accounts.\nThe big drawback of these digital vaults is that you have to set them up on all of your devices and ensure everything is synchronized between them. The user experience on mobile platforms is also lacking. This is mainly because there is no proper auto-fill functionality available on these platforms.\nMost modern web browsers such as Google Chrome and Mozilla Firefox do offer the option to safe website login credentials. These credentials are then also synchronized to your other devices running the same browser. Sounds like a good solution right? Sadly, no.\nThe problem is that these browsers store the decryption key for the credential store in a file on your device. This is essentially the equivalent of keeping your house key under the doormat. Firefox does allow you to set a master password for your credential store but you need to configure this on all your devices. You can read more about this problem in this article.\nI can understand why a lot of people still don’t use password managers. Some solutions can be unreliable or difficult to use. My greatest annoyance is that secrets management is not always well integrated within the operating system. You always need to install a third-party solution to manage and synchronize passwords between your devices.\nApple is one of the view companies that have done a good job when it comes to this stuff. Their systems have a central keychain which is used to store sensitive materials such as passwords or encryption keys.\nThis keychain is synchronized between all of your Apple devices and can be accessed by certain applications. The Safari web browser does not have its own password store but uses the central keychain to store all website login credentials.\nThese credentials can then be used by your other devices for logging into websites or apps. I like how the apps pick up the credentials of the website equivalent. If you for example login to the Netflix website from your MacBook, the credentials are also used by the Netflix app on your iPhone.\nAccess to the keychain is managed with Apple’s authentication system. The operating system will require the user to authenticate with touchID, faceID or a preconfigured password or PIN.\nI like Apple’s solution because it provides great security but also provides good usability. An easy to use solution has a greater chance of being adopted by the masses.\nOne-time passwords One-time passwords (OTP) are, just as the name implies, passwords that are only used once. These passwords usually are generated by the authentication system and sent to the authenticating user through a trusted channel. SMS is the most used channel but E-Mail is also used.\nThe main drawback of one-time passwords is that trusted channels are difficult to set up properly. SMS and E-Mail are popular options but these two channels can hardly be called trusted or secure. There are sadly not many more options to consider.\nTime-based one-time passwords Time-based one-time password (TOTP) is a type of one-time password where time is used to generate short-living temporal codes which can be used for authentication. This method does not rely on a trusted channel to pass a one-time code from server to client and therefore does not have the shortcomings of regular OTP.\nIn TOTP, both authenticating parties agree on a shared secret. This secret is then combined with a timestamp of the current time to create a one-time code that is valid for about 30 seconds. The authenticating party presents this code to the authenticator and the authenticator checks if this code matches his own code.\nThe nice thing about TOTP is that there is no need for a trusted channel and that there is no need to exchange the secret key when authenticating. The one-time code which is deprived from the secret key can be intercepted but will only be useful for a limited time.\nAlthough TOTP fixes some of the shortcomings of regular OTP, it also introduces new problems. The biggest one is the administrative burden. You need to have an application to keep track of all these TOTP secrets. There are several to choose from like Google Authenticator, Microsoft Authenticator or FreeOTP.\nThese applications do however not offer the option to synchronize codes between your devices. This means you lose access to them when something happens to your phone. You do get backup codes that you can use in these kinds of situations but where do you keep them?\nLuckily, password managers (like KeePass and KeePassXC ) have the option to keep track of TOTP secrets too. This allows you to keep your TOTP secrets and passwords in one place and synchronized across your devices. Sure, it’s more secure to keep your secrets and passwords in separate places but you can’t have it all.\nTOTP and OTP do protect against brute-forcing attacks since an attacker has no way of guessing the right code. Phishing attacks still work though. The attacker just has to add an extra input field for the code to the Phishing page.\nPush prompts Push prompts are a more easy-to-use alternative for OTP codes. The user who wishes to authenticate simply receives a push notification on their phone and acknowledges the login by pressing a button.\nThere is no standardized app for receiving push prompts, every platform has its own app. Android phones can receive push prompts for Google account logins and people with a Microsoft account can receive push prompts by installing the Microsoft Authenticator app.\nAttackers have found an interesting way to beat push prompts. They simply keep spamming their victims with prompts until one of them gets acknowledged. This type of attack is referred to as ‘Prompt bombing’.\nSingle Sign-on Single Sign-on (SSO) allows you to use a single account for multiple services. The easiest example of this are the ‘Sign in with Google’ or ‘Sign in with Facebook’ buttons which are displayed on the signup page of a service like IMDB or Feedly.\nSSO is very useful for companies because it allows them to administer access for all of their employees from a single location. It also allows them to easily revoke all access when an employee leaves the company. This solution is better than having to create multiple accounts for different services for a single employee.\nIt can also be useful for individual users, allowing them to use a central account to access all of their services. This system can also turn on the user when they get blocked by the authentication provider. You are essentially putting all of your eggs in the same basket. Closing down your Facebook account also means losing access to all the services linked to it.\nThis is the main reason why I am cautious when using SSO. I generally prefer the use of separate accounts and safe all the credentials in a password manager.\nHardware tokens One way of creating a secure authentication solution is by outsourcing the authentication process to a dedicated hardware token. These devices usually look like regular USB-Sticks. They are however specialized in storing secret key material rather than regular files.\nBut having a hardware device is not enough. You need something to facilitate the communication between the device and the web service that requires authenticating. This role is filled in by FIDO2. FIDO stands for “Fast IDentity Online” and is the name of an alliance whose sole purpose is the total annihilation of the password.\nFIDO2 was made in collaboration with the World Wide Web Consortium (W3C) and is made up out of the CTAP protocol and WebAuthn specification. CTAP was developed by FIDO and allows devices like laptops and smartphones to securely communicate with a hardware token through USB, Bluetooth or NFC. WebAuthn was developed by W3C and allows the communication from the hardware token to be relayed from the user\u0026rsquo;s device to the web service.\nThe actual authentication process involves public and private key cryptography. The hardware token starts with generating a private and public key. The private key never leaves the device but the public key is shared with the web service. The web service then stores the key so it can be used later on.\nA challenge is sent to the user when authentication is needed. This challenge has to be signed by the hardware token with the private key. The signed challenge is sent back to the web service. The service then verifies the signature with the earlier stored public key. The user is successfully authenticated when the signature checks out.\nUsing a hardware token is one of the most secure ways to authenticate. You can’t brute-force a signature. You also can’t steal the private key since it never leaves the token. You can steal the token itself though. It is therefore important to secure the token with a PIN. Hardware tokens are designed to wipe all cryptographic material when the wrong PIN is entered too many times.\nPasskeys Passkeys follow the same concept as hardware tokens but the private key is not stored on a token but on the user device. These keys can then be synchronized to multiple devices.\nPasskeys are a good alternative for those who are not willing or able to use a hardware token. This authentication method provides a better user experience but comes at the cost of security.\nIt becomes easier for an attacker to obtain the private keys because the keys are not stored on a separate hardware device but on the internal storage of a smartphone, tablet or laptop. There is also the risk of an attacker compromising the account used for synchronization.\nComparison Here follows a comparison of all discussed authentication methods against the earlier-mentioned attack factors. The table below compares the different authentication methods against the types of attacks. For each authentication method it will indicate which attacks are ineffective against it. A value of \u0026rsquo;no\u0026rsquo; indicates that the authentication method offers no protection against the given attack method. A value of \u0026lsquo;yes\u0026rsquo; indicates that the authentication method does protect against the given attack method.\nBrute-forcing Credential stuffing Phishing Malware Abusing recovery Passwords no no no no no OTP yes yes no no no TOTP yes yes no no no Push prompts yes yes no no no Hardware tokens yes yes yes yes no Passkeys yes yes yes no no Info\nPasswords only protect against brute-forcing if they are complex enough. They can also be reused making them vulnerable to credential-stuffing attacks. Passwords can also be entered into a phishing page or stolen from the clipboard by malware.\nOTP en TOTP cannot be brute-forced or used in a credential-stuffing attack (because each OTP key is unique per web service). The (T)OTP code can however be entered on a phishing page alongside the username and password and does therefore not protect against phishing attacks.\nGetting access to the (T)OTP code is more challenging since these codes are usually kept on a separate device (a smartphone) but these devices can also be infected with malware. There is a possibility to get TOTP codes on a hardware device (Keyfob). These devices have a battery life of about 3 to 5 years.\nPush prompts give about the same protections as (T)OTP but provide a better user experience. This method is however susceptible to prompt bombing. Push prompts also provide limited protection against phishing attacks. If a user is persuaded to enter their credentials into a phishing page, then there is no reason to suspect that they won\u0026rsquo;t approve the push prompt.\nFIDO2 hardware tokens provide a high level of protection. They protect against just about everything. You can\u0026rsquo;t brute-force the private key and each service has a unique key. Phishing also doesn\u0026rsquo;t work since the authentication process is handled by the token and the FIDO2 protocol.\nThe protocol will only accept challenges from legitimate servers. Malware attacks are also difficult because the key material resides on a separate device. Options are therefore limited even when an attacker has access to the laptop or smartphone of the victim.\nPasskeys have many of the advantages of hardware tokens but the private keys do not reside on a dedicated device. The key material resides on the laptop, tablet, smartphone or smartwatch of the user and cannot be protected the way it can be protected on a hardware token.\nNone of the authentication methods protects against abuse of recovery attacks because the whole point of account recovery is to bypass the regular authentication method(s).\nClosing words Authentication is difficult to do properly. There are many options and it\u0026rsquo;s always going to be a balancing act between security and ease of use. I think it is important to take the tolerance of the end user into account and set realistic expectations.\nToo many times a ‘box checking’ mentality is followed. Authentication systems are designed to pass auditing requirements and nothing more. Users are expected to remember complex passwords and change them to something else every 3 months. The human brain is not the best at remembering random sequences of letters, numbers and special characters.\nNobody wants to make weekly trips to IT because they keep forgetting their passwords. So of course users are going to come up with passwords such as ‘JoeCorpWinter2023!@‘. I wouldn’t blame them.\nAnother thing is the frequency users are asked to authenticate. If a user has to authenticate twice a day and has a five-day work week and works around 48 weeks a year, it would mean that they need to authenticate 2 * 5 * 48 = 480 times a year. That’s a lot.\nThe human brain is good at automating boring tasks. It won’t take long for these tasks to be outsourced to the subconscious mind. People will start entering their credentials on autopilot as soon as they are presented with a login screen. This is one of the main reasons why phishing attacks are so effective.\nI am convinced that companies can greatly improve their security posture and employee productivity by thinking further than the checklist. The people who design the security systems need to be able to place themselves into the feet of those who are going the use these systems. Ideally, you would want ways of authentication that feel more natural than just using passwords.\nI have always used passwords for disk encryption and user login in the past but solutions like the Trusted Platform Module (TPM), TouchID, Windows Hello and the Yubikey with FIDO2 have made life so much easier.\nThe next big challenge will be the prevention of the abuse of recovery methods. It doesn\u0026rsquo;t matter how strong your authentication is, it won\u0026rsquo;t matter much if it is just a phone call away from being compromised.\nThat will be it for now. The next post will be about Infrastructure As Code (IAC). See you in the next post!\nPutting things into practice For the practical part of this blog post, I am going to show you how to use a password manager called \u0026lsquo;pass\u0026rsquo;. Pass is not the best or easy-to-use password manager but it builds forth on the previous practical post about OpenGPG. Pass relies on OpenGPG and Git version control to get the job done.\nPasswords are saved in text files which are encrypted with OpenGPG. All password files are stored in a git repository. This makes it easy to share the passwords between multiple participants and keep a change history of every password.\nWarning\nGit is not the easiest application to use. I am making the assumption that you are already using it since git is very popular in the IT world. You might want to follow a tutorial like this one or this one if git is unknown to you.\nInstallation You can install pass for your system with the appropriate package manager:\nbrew install git pass # macOS apt install git pass # Debian/Ubuntu dnf install git pass # Fedora choco install git pass4win # Windows Warning\nThese instructions assume that you have already installed and setup OpenGPG on your system.\nSetting up the password store You can create your first password store with the init command:\npass init 0x12345678 # Optionaly setup git version control pass git init pass git remote add origin git@example.org:passwords.git Replace 0x12345678 with the ID of your own GPG key (you can list your key with gpg -K --keyid-format 0xshort). Replace git@example.org:passwords.git with the url to the remote git repository.\nInserting passwords Inserting a new password can be done with the insert command:\npass insert joe@example.org \u0026gt; Enter password for joe@example.org: \u0026gt; Retype password for joe@example.org: pass git push Entry names take on the \u0026lsquo;@\u0026rsquo; format. Pass will create the commit for you but you will need to push the changes to the remote server yourself.\nRetrieve passwords Passwords can be retrieved from the store by using the show command:\npass git pull # ensure we have the lastest changes pass show --clip joe@example.org The \u0026ndash;clip option sends the password to your system\u0026rsquo;s clipboard. You can list all entries with the pass ls command.\nSharing passwords with multiple team members Pass was not initially designed to work with multiple people, there are however some tricks you can use to make it work.\nFirst, you add the key ids of all of your team members to the .gpg_id file which can be found in the root of your password store. Then you reinitialize the store with the new keys:\npass init $(cat ~/.password-store/.gpg-id) This command will re-encrypt all entries with the keys listed in the .gpg_id file.\nYou might want to look into a modernized version of pass called gopass if are interested in a solution that works better for a group.\nWarning\nThere are some security related issues to consider when using solutions like pass or gopass:\nEntry names are not encrypted. An attacker can therefore see on which sites their victim has an account if they manage to gain access to the git repository. An attacker can add their own key id to the .gpg_id file and wait for someone else re-initialize the store, allowing them to decrypt all entries. So as you can read, controlling access to the git repository is very important.\n","permalink":"https://www.vharmers.com/posts/opsec_auth/","summary":"\u003cp\u003e\u003cem\u003eThis post is part of a larger series. You can find all posts over \u003ca href=\"https://www.vharmers.com/categories/opsec-series/\"\u003ehere\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWe have arrived at one of the most hated parts of security: Authentication. Everyone knows the frustration of having to type in a username and password before accessing the systems you need to do your work. You even need specialized applications in order to keep track of all of these credentials. I sometimes feel like a stamp collector but instead of collecting stamps, I am collecting passwords.\u003c/p\u003e","title":"The OpSec Series - Authentication"},{"content":"This post is part of a larger series. You can find all posts over here.\nHello and welcome to a new blog post in the OpSec blog series. As already mentioned in the previous post, this one will be about chat platforms.\nI can still remember a time when I was in school and carried around a Sony Ericsson J110 dumb phone. I didn\u0026rsquo;t use it much. It was just for contacting my parents in case of emergencies. All the cool kids in my class had these BlackBerry devices and they used an application called BlackBerry Messenger (BBM) to send messages to each other. I was told that it was cheaper to use BBM than to send messages over SMS.\nAlthough I never used BBM personally, it was the first time I came into contact with a chat platform. The first platform that I actually used was Skype (I know it\u0026rsquo;s more of a video conferencing platform, but it also has chat functionality). I got introduced to WhatsApp when I got my first smartphone which was a Samsung Galaxy Gio. It was the first time I could send messages from my phone without worrying about costs. I had a pre-paid SIM card and sending an SMS was still quite expensive back then.\nI have experimented with many chat platforms throughout the years but always had to put in a great amount of effort to persuade others to make the switch. Chatting with yourself is not a lot of fun after all. Different chat platforms target different audiences. Teams targets business users while Telegram has become more of a social media. I will be focusing on the more security-focused chat platforms.\nI have picked four platforms that I will compare to each other. I will promise that this will be an honest comparison without any bias towards any of them \u0026hellip; Ah, who am I kidding. I will obviously use this opportunity to praise my two favorite platforms and hate on the two I am forced to use. Here we go!\nThe rating system I would like to base the ratings on the CIA triad, but I will add the letters \u0026lsquo;A\u0026rsquo; and \u0026lsquo;P\u0026rsquo;. The A stands for Authentication and the P stands for Privacy. This is what it is going to look like:\nConfidentially; Indicates how good the chat platform is in keeping things secret. Chat messages should only be accessible to those who are part of the conversation Integrity and Availability; I have combined these two into one rating. Here we will determine how good a chat platform is in keeping chat records complete and available Authentication and Trust; Indicates how well the platform authenticates its users. Strong authentication controls make it difficult for attackers to impersonate others and gain access to conversation history. I have also sneaked user trust in here because it is heavily related to authentication. Users will need the ability to be sure that they are actually communicating with the right person. Authentication is about proving that you are the owner of a particular account and user trust is about proving that a particular account belongs to you Privacy; Here we focus on how much of your personal data you need to supply to the platform in order to participate. We also take a look at what the platform is allowed to do with your data Each rating will be assigned one of the following scores: terrible, bad, neutral, good or excellent. The platforms that I have chosen to compare are Keybase, Matrix (Element), WhatsApp and Signal. All these platforms have a security/privacy focus (or at least had this focus in the past).\nThe baseline The neutral score is used as a baseline. The criteria for the baseline are based on what the average chat platform has to offer. If one of our reviewed platforms performs significantly better than the baseline then it will get a ‘good’ or ‘excellent’ rating. I will give it a ‘bad’ or ‘terrible’ rating when it performs worse than the baseline.\nHere are the criteria:\nConfidentiality; The platform secures the connection between client and server with something like TLS. End-to-end encryption is offered optionally Integrity and Availability; Integrity of messages is ensured by comparing checksums. Users can access their data from multiple devices Authentication and Trust; The user has to sign in with a username and password. Two-factor authentication is optionally provided, but is not enabled by default Privacy; The platform collects some basic personal information like your name, e-mail address and phone number. The data is not shared with other third parties for advertising purposes. The user has the ability to close down their account (the right to be forgotten) Start warning: These criteria are not based on some research article but on what makes the most sense to me personally. End warning\nThe rating Now the rating will finally commence. Every platform will have its own section, except WhatsApp and Signal since they are very similar to each other. I have also added sections where I share my personal experiences and thoughts. These sections will however not be part of the review process.\nKeybase Keybase is an end-to-end encrypted messaging and file-sharing service. It was created by Chris Coyne and Max Krohn (and others) and started off in 2014 according to its Wikipedia page. Keybase focuses on security and functionality. It offers a wide array of services such as:\nOne-to-one messaging Group chats (revered to as ‘Teams’) Big Teams (multiple chat channels in a single group) File sharing Stellar crypto wallet integration The ability securely encrypt and sign data and transfer it through a different channel. You can generate encrypted and/or singed \u0026ldquo;blocks\u0026rdquo; which can be pasted in an e-mail or posted on a website just like with PGP Encrypted git repository hosting The ability to map social media accounts to your Keybase identity Command line support for those super hackers out there who can\u0026rsquo;t be bothered to leave the comfort of their glorious terminal window to use a filthy GUI application Confidentiality Keybase started off using PGP but later moved to the NaCL (pronounced as \u0026lsquo;salt\u0026rsquo;) library. All communications are end-to-end encrypted and Keybase also offers Forward Secrecy (FS). FS allows the use of throwaway keys for the encryption of messages. These keys are deleted after a certain period of time and ensure messages cannot be decrypted even when the main key has been compromised.\nForward Secrecy is only used for what is referred to as exploding messages. These are messages that get deleted after a pre-configured period of time. Keybase is not the only service to offer FS, Signal has it too for example. There is however something interesting about the implementation of Keybase.\nThe key used to encrypt these exploding messages only gets rotated on a daily basis, while other implementations rotate the key for every message. According to their documentation, they do this because they want to ensure good performance even in large groups. The complexity of the Keybase system was another reason that was mentioned.\nThe decision to store user data on their own servers does score them points on availability, but a system where messages are only stored until they can be safely delivered does provide better confidentiality. I have also taken their FS implementation into account and have decided to give Keybase a \u0026lsquo;good\u0026rsquo; rating on confidentiality.\nKeybase has also been audited by the colleagues of NCC Group in 2019. The audit report has been made publicly available and can be found over here.\nIntegrity and Availability All messages and files in Keybase are digitally signed which ensures integrity. All data is also stored on the servers of Keybase which ensures availability even then you lose access to all of your devices, but you do need a copy of your encryption key.\nThe platform also has multi-device support, which means you can chat with multiple devices at the same time. This allows you to pick up where you left off on another device if your current device gets eaten by a crocodile or something.\nKeybase has applications available for Android and iOS, but also for Windows, macOS, Debian, Ubuntu, Fedora and Arch Linux. This also makes the platform more approachable for people who don\u0026rsquo;t have a smartphone for example.\nMost of the data generated by the platform is not kept in a normal database on a server, but published on a ‘signature chain’. All the data on this chain is immutable and can therefore not be changed without invalidating the whole chain. This ensures data integrity even when the server has been compromised.\nA hash of each signature chain (every account has its own), is periodically stored on the Bitcoin blockchain. This essentially allows the Keybase servers to check if any of the signature chains have been tampered with.\nKeybase allows you to store files in what they call the Keybase FileSystem (KBFS). Every user gets a private and a public folder. The private folder is for storing your private stuff, which is only accessible to you, and the public folder is accessible to everyone. Every team also has its own folder and you can also create shared folders with others.\nKBFS works a bit differently than what you may be used to. Services like Dropbox, Google Drive and Mega synchronize your files to a folder on your system. KBFS however presents itself as a separate filesystem on your OS. Files are downloaded and decrypted on the fly when you access them.\nWhen using it, I have noticed that especially uploading files can be quite slow. The encryption process also takes a considerable amount of computing resources. It is also important to know that this feature is still in beta. Keeping copies of your important files would therefore not be a bad idea.\nI am giving Keybase an ‘excellent’ rating for Integrity and Availability since all your chat conversations are available to you on any device at any time. Their signature chain solution also ensures the integrity of user data even when the server is compromised.\nAuthentication and Trust Keybase has an interesting authentication model. You start with picking a username and configuring a password. You then install and configure the app on one of your devices and start chatting away.\nThere is only one thing that is important to understand. Your login credentials can only be used for administrative actions like changing your email address, adding a profile picture or following others. It does not allow you to use the chat functionality nor does it allow you to access any of your files.\nThe key used for encrypting and decrypting files and chat messages is only stored on your devices. A new device has to be authorized by an existing device. You also have the option to create a paper key (referred to as a couch key in Keybase). This key is supposed to be stored in a safe place and used as a backup if you lose access to all of your devices.\nIn the event that you lose access to all your devices and your paper key backup, Keybase allows you to reset your account from the web interface (as a logged-in user). This will however mean that you lose access to your files and chat history. You essentially start over from nothing.\nFurther hardening is possible by enabling ‘Lockdown mode’. Enabling this option essentially makes your password worthless since all actions through the web interface are disabled. You can only make changes to your account from your devices. You will be completely locked out of your account when you lose access to all of them (and the backup key). This feature will however make it very difficult for hackers to access your account since they will now need access to your devices.\nApart from tying devices to a user, Keybase also allows users to create trust relationships with each other. The platform uses a “web of trust” model. Users can follow each other just like they would on social media platforms such as Twitter.\nKeybase even goes a step further. It also you to connect your other social media accounts to your Keybase account, expanding the web of trust beyond the bounds of the platform.\nAuthentication and trust is where Keybase shines. Its advanced authentication features in combination with its web of trust earn it a well-deserved ‘excellent’ rating.\nPrivacy Warning\nI am not a lawyer or someone who is qualified to give legal advice. I will try to summarize the privacy policies of the to be reviewed products and services to the best of my ability, but cannot guarantee that I won’t make any mistakes while trying to understand, simplify and summarize the text.\nBasically, when stuff gets serious, don’t rely on advice from some dude on the internet. You can quote me on that one!\nKeybase has a pretty clean and easy to understand Privacy Policy. Here is a summary of what is collected:\nAccount info: This covers things like your name, avatar picture, e-mail address and information about the social media accounts you have linked to your profile Files and Data: All your files and chat messages are stored on the servers of Keybase in an encrypted format Account activity: Essentially a record of things you do in Keybase. Examples of this include editing account information, following other users and linking other social media accounts to your Keybase profile The Keybase server infrastructure is hosted in the U.S. This means they have to comply with U.S. laws and regulations. The data of EU citizens is transferred and stored under the Privacy Shield Framework.\nYou also have to understand that certain actions are recorded on a signature chain. And once it’s on the chain, it can never come off. You can decide to follow someone and later change your mind and unfollow them, but a record of your actions will always remain.\nYour account’s signature chain is publicly accessible by anyone. This is so anyone can verify the integrity of the web of trust.\nKeybase only collects what is necessary for their service to function and is clear about what they collect. They will therefore receive a ‘good’ rating. I have not given them an excellent rating because users do not have control over where their data is stored. The U.S. also isn’t known for its good privacy laws.\nInfo\nSome of you might be confused why I gave Keybase a high rating on privacy because the company is in the hands of Zoom now. I have rated Keybase on its current situation and not a possible future one.\nThe point is that Keybase is not allowed to grant its parent company access to its user data under the current privacy policy. This might happen in the future, but Keybase would have to update its privacy policy and notify its users of the change first. You also always have the possibility to close your account if that ever happens.\nPersonal input Keybase contains all the features I would ever dream of. Solid multi-device support, no worries about data backups and an easy to use web of trust. The thing is however that it is mostly targeted at geeks (Geekbase would be a more fitting name). What is a regular user going to do with a crypto wallet and encrypted Git repositories?\nKeybase is also the only reviewed chat platform that doesn’t support video calling. It does however allow you to intergrade with Google Meet or Zoom by using bots.\nI think one of the most important things left to tell you is that Keybase has been acquired by Zoom in 2020. Both Keybase and Zoom have published blog posts where they announce the acquisition (you can read them for yourself over here and here.\nThe plan is to integrate much of the functionality built for Keybase into Zoom. Zoom obviously wants to improve the security and privacy of its product after facing harsh scrutiny from IT security professionals at the start of the pandemic. I think its safe to say that Keybase is end of life. We are all just waiting for the termination notice at this point.\nI however did decide to include Keybase in this review since I do envoy the service and am impressed by how knowledgeable the people at Keybase are. I enjoyed reading their blogs and documentation. I especially liked that they explained why they were making certain design decisions and what kind of factors they were taking into account. I will certainly miss it when it stops.\nMatrix Matrix is a real-time communication protocol. The protocol is part of an open standard. The aim of the protocol is to make real-time communication work seamlessly between different service providers. It essentially wants to be the e-mail equivalent for chat communications.\nThe protocol has been in development since 2014 but is only out of beta since 2019. The development is overseen by The Matrix.org Foundation. Apart from developing the protocol, the foundation has released a server implementation called Synapse but is working on a new implementation called Dendrite.\nThe protocol was originally developed by New Vector Ltd before the ownership moved over to the Matrix Foundation. New Vector does however still take care of the development of the client implementation called Element (formally known as Riot Chat).\nWith Matrix, users are free to choose their own service provider and client application. This is a very big deal since most chat platforms give you no choice in the matter. At the moment of writing, Matrix itself is the biggest provider but more should emerge as the protocol becomes more popular. A lot of people and companies also set up their own server essentially becoming their own providers.\nMatrix has become quite popular in Open Source communities and governments. Different projects like KDE, Jellyfin and Mozilla call Matrix their home. The German army (Bundeswehr) and national healthcare system use Matrix to communicate internally. I also read this article about a school that started using Matrix to facilitate communications between students, teachers and parents.\nHere follows a quick summary of the features of Matrix:\nOne-on-one chats Group chats (revered to as ‘Rooms’). Rooms can be either public or private Video conferencing (by using Jitsi Meet) Support for End-to-end encryption Multi-device support Choice between different chat clients such as Element, Fluffy Chat or Fractal You can choose your own provider and even host your own server if you want to. A server running the Matrix server application is revered to as a ’Home server’ Confidentiality Matrix uses its own crypto library called Olm. Olm is an implementation of the Double Ratchet Algorithm. This Algorithm was developed by Open Wispher Systems in 2013. This company was also responsible for the development of the Signal chat messenger and the Signal protocol.\nCurve25519 key pairs are used to establish a shared secret between two parties who want to communicate with each other. This secret is then used to establish the Double Ratchet session.\nWarning\nI will explain more about Double Ratchet when we come to the review of WhatsApp and Signal. For now, you just need to know that it is an algorithm that supplies Forward Secrecy.\nMatrix uses the Megolm Group Ratchet for encrypting group messages. This algorithm is more suited for sending messages to a large group of people. It is however not as secure as the Double Ratchet, since it only provides Partial Forward Secrecy. Some confidentiality is exchanged for performance in this situation. It allows Matrix to have rooms with thousands of members.\nAll chat messages are stored on the servers of the chosen service provider. The chat history is kept indefinitely by default, but there is also experimental support for Retention Policies.\nA Matrix server can be federated with other servers, but can also run perfectly fine on its own. You can even have a closed-off network of federated servers that are not connected to the main network on the internet. This is the main reason why governments have taken a great interest in Matrix.\nSolid encryption, Retention Policies and private hosting earn Matrix an ‘excellent’ rating on confidentiality.\nIntegrity and Availability The thing that makes Matrix special is the fact that there is no ‘main’ server. The network consists out of a collection of federated servers that are located all over the world. This makes the network as a whole practically impossible to take down.\nMatrix also supports the use of multiple devices. This allows users to switch to a different device when their current device fails. Clients exist for just about any OS. I wouldn’t be surprised if someone created a client implementation for a smart fridge or something.\nI have given Matrix an ‘excellent’ rating on Integrity and Availability.\nAuthentication and Trust The authentication system of Matrix works in a similar way to the system Keybase uses. You protect your account with a password and your chat history is encrypted with an encryption key. Even when an attacker manages to get into your account, they will not be able to read your chat history. You can decrypt your chat history from another device by using a feature called “Cross singing”.\nAnd before I explain what this feature entails, I will have to explain the basics first:\nEvery device that is logged in on your account has its own encryption key When Bob and Alice start a chat, their devices will all exchange keys When Alice sends a message from one of her devices, this message will be encrypted and sent to all other devices participating in the chat This explains the encryption part but how does Alice know that all Bob’s devices are actually controlled by Bob? Matrix gives users the ability to verify each other’s devices. Alice and Bob can meet up in person and verify their devices by means of a verification process. This process requires them to compare public key fingerprints which are often displayed as QR codes.\nBut what happens if Bob buys a new phone? Normally Alice and Bob would have to meet again and verify Bob’s new device. This isn’t needed anymore with Cross-Singing enabled.\nWith Cross-Singing, both Bob and Alice will generate a Master key. This key can then be used to certify the owner’s devices and the master keys of other users (Note: I simplified things here a bit; the real situation is a bit more complex). So whenever Bob has a new device, he just certifies his new device with his Master key (by using one of his existing devices). And since Alice trusts Bob’s Master key, she will also trust his new device.\nBob’s new device will now also be trusted by his other devices. This is important since it allows the new device to retrieve the encryption key used for historical chat messages from Bob’s other devices.\nMatrix also gives you the option to store your Master key and other important key material on the server as an encrypted backup. The backup is protected by password that is chosen by the user or randomly generated on the device. This password should not the same as your account password. This would allow you to certify a new device even when you don’t have any of your other devices on hand.\nKeybase essentially does a similar thing but in Keybase it is more abstracted away. There is also one major difference between the implementation in Keybase and Matrix. Device certification is mandatory in Keybase but optional in Matrix.\nWarning\nYou might have noticed that I use the words “verify” and “certify” a lot and you might assume they mean the same thing. There is a difference between the two, however. To verify a key means that you check if the public key you have matches the public key of your partner. A certification process also produces “formal proof”.\nThis proof usually involves the process of using your private key to sign the public key of the person who is to be certified. The proof can then be shared with others. In OpenPGP, these proofs are published on a key server; with TLS you will get this proof in the form of a certificate; Matrix clients publish proofs on the server and Keybase publishes all proofs on the Signature Chain. You can compare it with a situation where you get a proof of attendance in the form of a paper certificate or badge after attending a course or seminar.\nThe difference between the two is important. Certification provides nonrepudiation, verification does not. You can always deny that the verification ever happened. Certification cannot be denied afterwards because a proof is created.\nNote that Matrix and Element use the term ‘verify’ while it is actually a certification process since a proof in the form of a digital signature is created.\nIt is also important to know that Cross-Signing only protects the confidentiality of historical chat messages and nothing else. Matrix doesn’t have a lockdown mode as Keybase has.\nA hacker, let’s call him Jack, who has gained access to Bob’s account can still listen in on the conversation between Bob and Alice. This is because devices will also send new chat messages to unverified devices (at least with the Element clients).\nYou can however disable this behavior by going into: user settings -\u0026gt; security -\u0026gt; advanced -\u0026gt; never send messages to unverified sessions -\u0026gt; enable. This will however require you to also verify your chat partners before being able to send messages to them.\nJack can also communicate with Alice through Bob’s account but Alice will be able to see that these messages are coming from an unverified device.\nHere is a screenshot of what that would look like:\nAs usual, the interface language is in Dutch but I will explain what is happening here. Every user has a little shield in front of their name. The shield is black by default but turns green when you have certified the user (which involves meeting up in person and scanning QR codes). The shield will turn red when an uncertified device joins the chat.\nThe screenshot above clearly shows the red shield next to my name. The popup shows that I have three devices. Two of them are certified and one called “Tablet” is marked as untrusted because it hasn’t been certified.\nWithin Matrix, it is only possible to create one-on-one trust relationships. This means that if four people want to have a conversation, six certifications need to happen before all of them trust each other. You can calculate this with the following formula: N(N - 1)/2 where N is the number of participants. So when you have a chat room with 50 members, 50(50 - 1)/2 = 1225 certifications have to take place before all members have trust relationships with each other.\nIt is safe to say that one-on-one trust relationships don’t scale well. It is doable with a small group of friends or family, but not with a larger group of people. This scaling problem is usually solved by using either a web or chain of trust. There is a proposal for adding a web of trust to Matrix, so we might see it in the future.\nI have given Matrix a ‘good’ rating on Authentication and Trust. It didn’t get an ‘excellent’ rating because of the trust scaling problem.\nPrivacy The privacy policy of the Matrix.org server can be summarized in the following points:\nThe following account information is collected: Username Password (stored as a hash) Display Name (if you configured one) Your e-mail address Your phone number (if you choose to provide it) You can close your account and have to right to be forgotten: Messages only accessible to your account will be deleted from the server within 30 days Users you have already communicated with will get to keep their copy of the conversation history New members who have joined a room will not be able to access your past messages (existing members will get to keep their copy of your messages though) The foundation uses a combination of Third Party hosting services namely: UpCloud, Mythic Beats and Amazon Web Services Application data logs, which include username, user IP and user agent, are kept for no longer than 180 days There is no mention of where the server running the Matrix Home Server is located. Their privacy policy is based around GDPR and in the section “Transfers of your Data”, it is stated that data will be transmitted to other Home Servers outside of the EU. This hints that their own Home Server is inside of the EU, but I am just making an assumption here. But that’s just the privacy policy of the most popular server. There are many other servers out there. You can find a list here. You can also host your own server. This guide explains how to do it on a Raspberry Pi.\nIt is furthermore important to know that having control over all of your data can be difficult. As mentioned in one of the points above, your provider will try to delete your messages from rooms if you request to be forgotten. Those rooms can however be located on other servers that are not under the control of your provider. Your provider will pass your request to be forgotten on to other servers, but it is up to them to actually delete your data.\nI have decided to give Matrix an ‘excellent’ rating on Privacy. No other chat platform allows you to choose whom to entrust with your personal information.\nPersonal input Matrix solves one big problem I have been having with chat platforms. It’s the problem where you are forced to use the chat platform that your friends and colleagues use. You need to use the client that is provided by the platform, you need to have an OS that they support and you have to store your data on their servers.\nMatrix allows everyone to participate. There are different clients to choose from and even different server implementations. It doesn’t matter if you are on Android, iOS, macOS, Windows or some Linux distro. There will be a suitable client for you. You can even create one yourself if you have the required technical skills.\nI am however also aware that an open system can have its drawbacks. It is difficult to get things done in an open system because introducing changes requires lots of coordination with others. Apple was able to quickly switch its processor model from an Intel chip to its own ARM chip because it controlled the OS and the hardware. Microsoft has however been struggling with ARM for years.\nApple has a great deal of flexibility to shape and develop their product how they want to while Microsoft needs to get other parties on board too. Apple’s strategy however a bit of a double-edged sword. A dictator can use his power to do a great amount of good for his people but this same power can be used to do great evil.\nI think my greatest worry about Matrix is that it becomes something that’s only used by nerds and not by regular people. Another worry I have is about the public servers. A lot of these servers are hosted by hobbyists and volunteers. And I am sure that these people do this with great passion but they aren’t exactly bound by some kind of SLA.\nRegular users have high standards when it comes down to availability. They want a chat app that just works. They will leave and look elsewhere when things are too slow or buggy. Nerds have a higher tolerance when it comes down to this stuff, especially when they believe in the technology behind it.\nMatrix and New Vector will have to up their game if they want to compete with big boys such as Whatsapp, Signal and iMessage. The Element client can be quite buggy sometimes. Especially the Android client deserves some love. I tested it on an Android tablet and it was practically unusable. Certifying another user didn’t work because I got stuck in one of the dialog boxes so I couldn’t finish the process.\nI am overall convinced that Matrix has potential, but I have my doubts if it is able to realize it.\nWhatsApp and Signal WhatsApp was launched in 2009 by Brian Acton and Jan Koum. It quickly gained popularity and was later bought by Facebook for a staggering 19 billion dollars in 2014. Brian Action left the company in 2017 to start a nonprofit group, which later developed the Signal messenger. Jan Koum left WhatsApp a year later due to concerns about privacy, advertising and monetization by Facebook.\nSignal started off under the name of TextSecure. It was initially developed by Whisper Systems and launched in 2010. Twitter acquired the company a year later. The service eventually was discontinued, but Twitter did release the source code of the application.\nThe application was later further developed by Open Whisper Systems, which was founded by the original owner of Whisper Systems (Moxie Marlinspike). Open Whisper Systems became the Signal Technology Foundation in 2018 when Moxie Marlinspike and Brian Acton decided to join forces.\nBoth WhatsApp and Signal have similar features:\nBoth make use of the Signal protocol for end-to-end encryption Both can be used for one-to-one and group chats Both can be used for video and voice calls Signal offers an option to evade censorship by redirecting network traffic through proxies Confidentiality WhatsApp and Signal both use the Signal protocol for end-to-end encryption. The protocol uses Extended Triple Diffie-Hellman (X3DH) for initial key negotiation and the Double Ratchet Algorithm for providing Forward Secrecy.\nX3DH allows two parties to agree on a single shard key. Your phone will essentially generate a public and private key and sends the public one to the servers of Signal. Anyone who wishes to communicate with you can then send you an initial message by using your public key. The message will be held by the Signal server and later picked up by your phone when it is online. Your phone will then be able to decrypt the message with the private key.\nThe Double Ratchet Algorithm allows the rotation of encryption keys. Every message is encrypted with its own unique key. The new key is derived from the old one. It is not possible to reconstruct the old key with the new key. Even when an attacker manages to get access to the current key, it is not possible to decrypt previous messages.\nAs the name implies, the Double Ratchet Algorithm uses two Ratchets. One is used for protecting historical messages and the other is used for protecting future messages. This makes the connection ‘self healing’.\nThere are some nice Youtube videos that explain these subjects in more detail. Check them out if you want to know more:\nDiffie-Hellman key exchange Double Ratchet You can also take a look at the specifications for X3DH and Double Ratchet over here and here.\nThe use of state of the art encryption earns both Signal and WhatsApp an ‘excellent’ rating.\nIntegrity and Availability As with Keybase and Matrix, the integrity of all messages is checked before they are processed further. There are some differences when it comes to availability though. Keybase and Matrix keep the messages on the server while Signal and WhatApp remove them after they have been picked up. This strategy gives the user better confidentiality but comes at the cost of availability since they now lose all their chat history when their device gets lost or stops working.\nWhatsApp has the option to make scheduled backups to Google Drive or iCloud, but these backups were stored unencrypted for some time. The option to encrypt backups was only recently introduced. Another thing is the Recovery Point Objective (RPO). The RPO indicates how much data is lost when a backup restore needs to happen.\nWhatsApp allows you to configure a scheduled backup frequency. You can choose between a daily, weekly or monthly backup schedule. Your smallest configurable RPO would then be one day since you would lose up to a maximum of one day of chat history if your device fails. This is not that bad, but both Keybase and Matrix have an RPO of zero.\nThe backup capabilities of Signal are even more limited than those of WhatsApp. Signal can only make backups on Android. Backups are also stored on the device itself. You would have to manually copy the backup to a storage provider of your choice.\nApart from the RPO, you also have the Recovery Time Objective (RTO). The RTO indicates how much time you need to recover from a failure. With both Signal and WhatsApp you would need to:\nGet a new SIM card if the device was stolen or take the existing one out of your broken phone. You could also choose to keep a backup SIM card at the ready, but it would need to be registered on a different number since you can’t have two SIMs with the same number Insert the SIM into your backup phone Go through the registration process (assuming you already have the applications installed) Restore the backup (if you have one) Let’s say this process would take you half an hour (assuming the backup phone is close to you and you don’t need to get a new SIM). And I am being nice here since I didn’t include the re-verification of all your contacts. This isn’t bad but then again, the competition provides the ability to just continue on one of your other devices (which doesn’t even need to be a phone).\nAvailability is not the strong suit of both WhatsApp and Signal. They both clearly underperform when compared to the competition. I have decided to give WhatsApp the ‘bad’ and Signal the ‘terrible’ rating.\nAuthentication and Trust Both Signal and WhatsApp work with phone numbers instead of usernames. Phone numbers are verified by sending a text message with a unique code to the registered number. Contracts are pulled from the phone’s own address book.\nBoth platforms provide the ability to verify the keys of conversation partners. This can be done by scanning QR codes or manually comparing the key fingerprints. Signal offers the option to mark a contact as verified, but WhatsApp does not offer such an option. Keys are tied to devices which means that the verification has to be repeated if a user switches to a new device.\nBoth platforms also give the user the ability to secure their accounts with a PIN code. This prevents others from registering on their phone numbers. WhatsApp enforces a six-digit code while Signal allows longer alphanumerical PINs.\nI am giving Signal and WhatsApp a ‘bad’ rating on Authentication and Trust. Using text message verification as a second-factor authentication method is already deemed risky. Most services have replaced it with push notifications or TOTP. The telephone network was not designed to be used as an authentication broker and, in my option, should not be used as such.\nPrivacy The Privacy Policy of Signal can be summarized as follows:\nSignal tells not to profit from your personal data Signal stores the phone number you use to register. All other profile data is stored in an encrypted format Your messages are kept in a queue if they can’t be delivered to your device (because it is offline). These messages are then deleted from the server after they have been properly delivered Signal can optionally use your address book to discover other Signal users. Contact information is sent to the server in a hashed format Signal may share your information with Third Parties Your user data is stored in the U.S. I couldn’t find anything about a logging policy. I do assume they at least keep some basic logs that contain things like IP addresses and device identifiers The Privacy Policy of WhatsApp is a lot more complicated. It can be summarized as follows:\nYour Account information such as your phone number, profile name and profile picture is stored on the servers of WhatsApp WhatsApp can optionally use your address book to discover other WhatsApp users. Contact information is sent to the server in a hashed format. This information is not shared with the parent company (Meta) Undelivered messages are queued if they cannot be delivered. These messages are then deleted from the queue when they are successfully delivered or when the messages are still undelivered after 30 days They basically collect everything they can get away with. From your interaction with the app to the battery level and signal strength of your phone Your information is shared with Third Party providers such as Meta Your user data is stored in the U.S. EU citizens fall under a different Privacy Policy. It is essentially the same as their normal Privacy Policy, but a lot more detailed. They are also more specific on what data they share with Third Parties.\nI have given Signal a score of ‘good’ on privacy. It has not received an ‘excellent’ score because the platform requires you to share your phone number with your conversation partner. This only allows you to communicate with friends, family and colleagues but not with some stranger you met on the internet for example. I have no problem with putting my Matrix and Keybase usernames on my contact page, but wouldn’t dare to list my phone number there.\nWhatsApp obviously gets a ’terrible’ score when it comes to privacy. The company claims that respect for their users’ privacy is coded into their DNA, but at the same time, they pull every bit of data they can get their hands on off your phone.\nPersonal input I am going to be honest with you. I don’t really like WhatsApp and Signal. I don’t like the whole phone-centric approach. It requires me to take a device with a small screen out of my pocket, while I have a big screen in front of me.\nAnd sure, both of them have desktop apps. But they are reliant on your phone, which means they cannot be used as a fallback option. There is also no tray icon so you have to keep the window open all the time (also looking at you Element).\nBoth of these platforms just tire me out. I am tired of having to manage backups or having to start from scratch after a device swap or reset. I just want my chats to be there when I log in.\nI am tired of the ‘Your security number with X has been changed’ messages. Just get rid of the TOFU already. Or at least allow for trust relationships between users instead of devices. People should trust people and not their devices. Devices change all the time. It is just not maintainable this way.\nI am tired of having to worry about account takeovers because of something like a SIM swapping attack. There is just nothing you can do about it. You are fully reliant on your phone carrier to have your back. And yes, you can set up a PIN and I have done so with Signal.\nWhatsApp will however spam you with prompts until you become so irritated that you disable it again. I have saved the PIN in my password manager. There is no reason to bother me with these reminder prompts. Signal luckily has an option to disable them.\nMost would say that WhatsApp and Signal are easy to use. I think that they are very difficult to use properly. Most people are just not using them properly.\nResults Here follows an overview of all the ratings:\nKeybase Matrix Signal WhatsApp Confidentiality good excellent excellent excellent Int and Avail excellent excellent terrible bad Auth and Trust excellent excellent bad bad Privacy good excellent good terrible It is kind of up to you how you interpret these results. You might rank them by the highest score or by the average score. I personally like to rank them by using the Lowest score since a chain is only as strong as its weakest link. This method would create the following ranking:\nMatrix; lowest rating was ‘good’ on Auth and Trust Keybase; lowest rating was ‘good’ on Confidentiality and Privacy Signal; lowest rating was ‘terrible’ on Integrity and Availability WhatsApp; lowest rating was ’terrible’ on Privacy This ranking does however not mean everything. Most will choose WhatsApp because it has the biggest user base. You might give Matrix a try if you are already taking the effort to move away from WhatsApp. You can always move to Signal if Matrix is a bit too bleeding edge for you.\nJust know that although Signal is a better choice than WhatsApp. It has inherited the same design problems. It is especially great fun to use it in a company setting where phone numbers are recycled as existing employees leave and new ones are onboarded.\nKeybase can also be an option if you want something that is more stable than Matrix and has more features than Signal. Just know that its future is uncertain and you might be forced to move to something else later on.\nClosing words I was actually planning to make this post shorter than my last one. ‘How hard could it be. Just compare some chat platforms. It should only take a week or two’ I thought. What a little naive boy I was, eating more than I could chew, but I am nevertheless pleased with the end result.\nDuring my research, I have noticed that chat platforms in general don’t handle user trust very well. It feels like a degradation when compared to older technologies like SSL/TLS and OpenPGP.\nI know it is sexy to claim that your product uses ‘Super advanced military grade quantum proof encryption’, but giving people the proper tools to verify and ideally also certify their conversation partners is just as important. Especially now people can do stuff like having video meetings with government officials while impersonating someone else with deep fake technology (source).\nI am fully aware that user trust is hard. It is not like encryption where you have a magic formula where plaintext goes in and cipher text comes out. User trust requires active participation from the users themselves. It is one of the reasons why tools like GnuPG are so difficult to use. This however does not mean that it can be ignored.\nThe next post in the OpSec blog series will be about passwords and multi-factor authentication. Thanks for reading and see you at the next one!\n","permalink":"https://www.vharmers.com/posts/opsec_chat/","summary":"\u003cp\u003e\u003cem\u003eThis post is part of a larger series. You can find all posts over \u003ca href=\"https://www.vharmers.com/categories/opsec-series/\"\u003ehere\u003c/a\u003e\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eHello and welcome to a new blog post in the OpSec blog series. As already mentioned in the \u003ca href=\"https://www.vharmers.com/posts/opsec_mail/\"\u003eprevious post\u003c/a\u003e, this one will be about chat platforms.\u003c/p\u003e\n\u003cp\u003eI can still remember a time when I was in school and carried around a Sony Ericsson J110 dumb phone. I didn\u0026rsquo;t use it much. It was just for contacting my parents in case of emergencies. All the cool kids in my class had these BlackBerry devices and they used an application called BlackBerry Messenger (BBM) to send messages to each other. I was told that it was cheaper to use BBM than to send messages over SMS.\u003c/p\u003e","title":"The OpSec blog series - Chat platforms"},{"content":"This post is part of a larger series. You can find all posts over here.\nWelcome to the second blog post in this blogging series. I recommend reading the introduction post before starting with this one. Email is one of the oldest ways to communicate on the world wide web. And since the internet was created with openness in mind, so it shouldn\u0026rsquo;t come as a surprise that e-mail wasn\u0026rsquo;t designed to be very secure. Sending an e-mail is like sending a postcard. Every party involved in the delivery process can read the contents of the message. From the people working in the distribution centers to the mailman who delivers the card to your door.\nThe solution to this problem is to encrypt your e-mail. This makes the mail unreadable to anyone who is not in possession of the decryption key. You and the recipient(s) of your message will need to install the proper encryption software to handle the encryption and decryption operations. The most popular encryption software choices are OpenPGP and SSL/TLS. I will discuss both choices in the following two sections.\nSSL/TLS Secure Sockets Layer (SSL) and its successor Transport Layer Security (TLS) are encryption protocols. I won\u0026rsquo;t bore you too much with the technical details, but there is one thing I want to highlight here. It\u0026rsquo;s not the way the protocol can encrypt and decrypt a message, but the way the sender and receiver of the message can be verified. You see, encryption is fine and all, but it has limited use when there are no guarantees that the recipient of the message is actually the intended recipient. And how can the recipient verify that the message actually came from the listed sender?\nLet\u0026rsquo;s clarify this problem with a real-world example. In most counties, you are only allowed to drive a car after passing the driving test. Passing the test shows that you have the knowledge and skill to safely drive a car. But how can a police officer verify that you have passed the test? A police officer cannot trust everyone on their word. People can lie after all. The government therefore gives everyone who passes the test a plastic card which acts as proof of their accomplishment. We call his card a driving license.\nWhenever you get pulled over by the police, you can present the officer with your license. The officer might not trust you as an individual, but they will trust the government. There can even be more complex trust relationships. You might get pulled over when on vacation in another country. The police officer does not trust you as a person, but they do trust the authority of their own government, which in turn trusts your own government, which trusts your ability to drive a car.\nSSL and TLS have a similar solution to this problem. There are certificate authorities that can create and distribute certificates to those who need them. A company can act like a certificate authority and provide certificates for all its employees. The employees can use these certificates to verify the identity of each other.\nThe company can also create a trust relationship with a commercial certificate authority, allowing the employees to prove their identity to people outside the company like their customers. This concept is called a \u0026ldquo;chain of trust\u0026rdquo;. Everyone trusts the commercial certificate authority, the authority trusts the company and the company trusts its employees.\nThe most popular application for doing everything SSL and TLS related is OpenSSL, but there are also alternative solutions such as LibreSSL, GnuTLS and WolfSSL.\nWarning\nIt\u0026rsquo;s important to know how the terms SSL and TLS are used. As previously said: TLS is the successor to SSL, but people also use both terms interchangeably. The SSL protocol has been deprecated and should not be used in production environments. So when someone uses the term SSL, they are probably referring to TLS. We nerds don\u0026rsquo;t like change too much and simply keep using the term SSL, even when the name was changed to TLS. I will just use the term TLS from now on.\nWarning\nYou might stumble on to the term \u0026ldquo;S/MIME\u0026rdquo; when doing your own research into mail encryption. S/MIME stands for Secure/Multipurpose Internet Mail Extensions and is a standard for encrypting and singing e-mail messages (MIME data). S/MIME does not do any encryption in and of itself, it simply describes how the encrypted data should be packaged and presented to the receiver of the message. OpenPGP has its own standard for this called OpenPGP/MIME.\nI decided to use the term \u0026ldquo;TLS\u0026rdquo; because I wanted to focus on the tools that actually do the encryption and signing operations.\nInfo\nThe cost of certificates can highly differ depending on what your situation is. These are the things you need to think about:\nCertificates come with different assurance levels (also known as classes). There is usually a lower assurance level where only the e-mail address is verified and a higher level where information about the business is also verified. You can get a lower class certificate for around € 20 to € 100 a year (for personal use). A higher one will cost you around a € 50 to € 400 (for business use). Think about how you are going to manage these certificates. Each newly onboarded employee will need their own certificate and you will need to revoke the certificate of every off-boarded employee. Issued certificates will also need to be renewed after a period of 1 to 3 years. OpenPGP PGP stands for Pretty Good Privacy and is the name of an encryption application developed by Phil Zimmermann in the 90s. OpenPGP is an open standard of PGP. This open standard allows others to make their own implementation of PGP. GNU Privacy Guard (abbreviated as GPG or GnuPG) is such an implementation. This application allows you, just like with OpenSSL, to encrypt and decrypt data. One of the biggest differences between TLS and OpenPGP is the way they handle trust relationships.\nTLS works with certificate authorities, creating a chain of trust. The authorities take care of all the complex procedures. You provide them with the necessary information and pay them a fee for their services. The authority will review and confirm the validity of the information and provide you with some kind of proof of identity if everything checks out. But what happens when the authority refuses to give you this proof? There are enough people in this world who cannot leave their county, because their government refuses to provide them with a passport and you can\u0026rsquo;t cross the border without one.\nOpenPGP makes no use of central authorities. Its users create trust relations between themselves instead. It uses a web of trust instead of a chain of trust. Each user starts with creating a key pair. Each key pair consist out of a public and private key. One key is used to encrypt a message and the other is used to decrypt a previously encrypted message. We call this asymmetric encryption since different keys are used for the encryption and decryption process.\nApart from the key material itself, the public key file also contains information like first- and last name, e-mail address and can even contain a picture of its owner. This public key acts as the user\u0026rsquo;s proof of identity. It\u0026rsquo;s then up to the user to get their key certified by other people. These people can be friends, colleagues or other acquaintances. And let\u0026rsquo;s not forget that this user can also certify the public key of others by using their own private key. This system always reminds me of an advertisement strategy we Dutch people call \u0026ldquo;Mond tot mond reclame\u0026rdquo; which translates to: \u0026ldquo;Mouth to mouth advertising\u0026rdquo; (I believe this is revered to as \u0026ldquo;Word of mouth\u0026rdquo; in the English language).\nIf you are a business owner and deliver a proper product or service to your customers, those customers will recommend your business to their friends. Those friends will then pass the message along and will give the same recommendation to their friends, creating an ever-increasing web of potential customers.\nWhy is nobody using this? You might be thinking: \u0026ldquo;Nice story and cool software, but I don\u0026rsquo;t know anyone in my circle of friends who is actually using this nor have I heard any mention about these solutions before\u0026rdquo;. This is a valid point. Both TLS and OpenPGP have some major drawbacks preventing them from being used on a wide scale for e-mail encryption. TLS is the most user-friendly since most modern e-mail clients such as Outlook, Apple Mail and Thunderbird support it out of the box. The Certificate Authority will also do most of the heavy lifting for you, but they expect to be paid for their services.\nA normal user is not going to pay 40 euro\u0026rsquo;s a year to get a nice checkmark behind their name. TLS is therefore more popular in corporate environments. Businesses either manage their own certificate authority or let a third party handle this task for them.\nInfo\nMost e-mail applications will display a checkmark behind the sender\u0026rsquo;s name when the e-mail is digitally signed and successfully verified. Clicking on this checkmark will display some technical information about the sender\u0026rsquo;s certificate. Here you can see how this looks in Apple Mail on iPadOS:\nThe interface language is in Dutch, but you should still be able to make out some information such as my name (Valentijn Harmers), the name of my employer (NCC Group) and the name of the Certificate Authority who provided the certificate (Entrust, Inc).\nSo TLS is too pricy for non-business users, what about OpenPGP? The software for using OpenPGP is free of charge and it is not customary for users in the web of trust to ask for money in exchange for certifying your key. The problem with OpenPGP lies in its complexity. It puts a lot of responsibility and complexity on the shoulders of its end users. This is too much to ask of your everyday user. It\u0026rsquo;s therefore only used by geeks and maybe some journalists. There are some graphical interfaces that take away some of the complexity, but it is still a difficult tool to use properly.\nPutting things into practice Let\u0026rsquo;s leave the theoretical part of this post behind and do something practical. I am going to show you how to use OpenPGP. We are going to generate a key pair and do some stuff with it. Ensure that you have followed the steps in the Introduction post before proceeding with this one.\nInstalling the software We need an application that implements the OpenPGP standard. GnuPG is the best choice. Open up a terminal/Powershell window and type the appropriate command for your system:\nbrew install gpg pinentry-mac # macOS apt install gnupg # Debian/Ubuntu dnf install gnupg2 # Fedora choco install gpg4win # Windows Configuring your system We will need to do some configuration steps before we can proceed with the key pair generation.\nPinentry configuration on macOS Configure GPG to use the pinentry-mac program for entering passwords on a macOS system. This program is preferred over the default pinentry program which is shipped with gpg.\necho \u0026#34;pinentry-program /usr/local/bin/pinentry-mac\u0026#34; \u0026gt;\u0026gt; ~/.gnupg/gpg-agent.conf gpgconf --kill gpg-agent Set the GPG_TTY environment variable on Linux and macOS You will need to set and export the GPG_TTY environment variable for the GPG agent on Linux (Debain/Ubuntu/Fedora) and macOS systems:\nGPG_TTY=$(tty) export GPG_TTY It\u0026rsquo;s best to add these lines to the startup script of your shell. Choose the right command for the shell you are using:\n# Bash shell echo \u0026#39;export GPG_TTY=$(tty)\u0026#39; \u0026gt;\u0026gt; ~/.bashrc # Zsh shell echo \u0026#39;export GPG_TTY=$(tty)\u0026#39; \u0026gt;\u0026gt; ~/.zshrc # Fish shell echo \u0026#39;set -gx GPG_TTY (tty)\u0026#39; \u0026gt;\u0026gt; ~/.config/fish/config.fish Info\nBash is the default shell on most Linux systems. Zsh is the default shell on macOS. You can figure out which shell you are using by running the following command echo \u0026quot;$SHELL\u0026quot;\nThis will make sure that the prompt for password entry is displayed in the proper terminal window.\nEnable SSH support for the GPG agent on Linux and macOS (optional) The GPG agent allows you to use your GPG authorization key for SSH access. You can skip this step if you are not interested in using your key for SSH authentication. Follow the following steps to enable it:\nStep 1: Enable SSH support in the agent configuration file:\necho \u0026#39;enable-ssh-support\u0026#39; \u0026gt;\u0026gt; ~/.gnupg/gpg-agent.conf Step 2: Configure SSH to use the GPG agent for authentication:\n# Bash shell echo \u0026#39;export SSH_AUTH_SOCK ~/.gnupg/S.gpg-agent.ssh\u0026#39; \u0026gt;\u0026gt; ~/.bashrc # zsh shell echo \u0026#39;export SSH_AUTH_SOCK ~/.gnupg/S.gpg-agent.ssh\u0026#39; \u0026gt;\u0026gt; ~/.zshrc # Fish shell echo \u0026#39;set -gx SSH_AUTH_SOCK ~/.gnupg/S.gpg-agent.ssh\u0026#39; \u0026gt;\u0026gt; ~/.config/fish/config.fish Step 3: Restart the agent:\ngpgconf --kill gpg-agent gpgconf --launch gpg-agent Step 4: Close and reopen your terminal. The configured environment variables should now be set (you can check this by running the env command)\nWarning\nThese steps will only work on Linux and macOS systems. Windows users often use applications such as Putty or Kitty to establish SSH connections to Linux servers. I don\u0026rsquo;t know if this kind of setup is possible with these kind of applications.\nGenerating keys Now it\u0026rsquo;s time to generate our key pair.\nStep 1: First you will have to generate your master key. The code block below shows the command you need to run in your terminal on the first line. The rest of the lines show the answers to the questions the gpg application will ask. Replace the answers to the \u0026lsquo;Real name\u0026rsquo;, \u0026lsquo;Email address\u0026rsquo; and \u0026lsquo;Comment\u0026rsquo; questions with your own information.\ngpg --full-generate-key Your selection? 4 What keysize do you want? (3072) 4096 Key is valid for? (0) 6y Is this correct? (y/N) y Real name: John Doe Email address: john.doe@example.com Comment: John\u0026#39;s key Info\nJust like a driver license or passport, a key pair has an expiration date. You are free to choose this date during the creation of your key. The key generated in the code block above, is valid for 6 years. You will have to create a new master key when the old key is about to expire.\nStep 2: Verify the key has been created and note down its ID:\ngpg -K --keyid-format 0xshort /home/john/.gnupg/pubring.kbx ---------------------------------- sec rsa4096/0xFC1B1408 2022-07-07 [SC] [expires: 2028-07-05] 26B6896326F977B6FA0DBE4B1D047E24FC1B1408 uid [ultimate] John Doe (John\u0026#39;s key) \u0026lt;john.doe@example.com\u0026gt; The code block above shows the command to display the key information. It also shows example output. The key ID in this example is 26B6896326F977B6FA0DBE4B1D047E24FC1B1408 and its short version is 0xFC1B1408. Your own ID will look different. Ensure that you replace 0xFC1B1408 with your own ID in the next steps.\nInfo\nThe created master key allows you to do 2 things:\nCertify other keys. This allows you to create trust relationships with others Digitally sign any file or piece of text Step 3: Add an encryption subkey to your master key:\ngpg --edit-key 0xFC1B1408 gpg\u0026gt; addkey Your selection? 6 Key is valid for? (0) 2y Is this correct? (y/N) y Really create? (y/N) y gpg\u0026gt; save Info\nIt is best practice to create separate key material for signing and encryption purposes. The encryption key can have a shorter expiration date than the master key and can be easily rotated.\nStep 4 (optional): Create a subkey for authentication. You can skip this step if you are not planning to use GPG for SSH access:\ngpg --expert --edit-key 0xFC1B1408 gpg\u0026gt; addkey Your selection? 8 Your selection? A Your selection? S Your selection? E Your selection? Q Key is valid for? (0) 2y Is this correct? (y/N) y Really create? (y/N) y gpg\u0026gt; save Step 5 (optional): Backup your keys. The following command will create backup files in the current working directory:\ngpg --armor --output private.asc --export-secret-key 0xFC1B1408 gpg --armor --output sub_private.asc --export-secret-subkeys 0xFC1B1408 gpg --armor --output public.asc --export 0xFC1B1408 Move these files to a save place. It is recommended to move then to removable storage like a USB stick or CD/DVD. You can also print the keys to paper since they contain plaintext characters.\nStep 6 (optional): Save your public SSH key if you created an authentication key and enabled SSH support:\nssh-add -L \u0026gt; id_rsa.pub You can then copy the contents of the id_rsa.pub file to the systems you need access to.\nCreating trust relationships In order verify signatures or encrypt messages, you will need to import, trust and sign the public keys of others.\nStep 1: Import the key of the person you want to create a trust relationship with. You can import from a file of paste the key directly in to your terminal:\n# Import from file gpg --import public.asc # Paste directly into terminal gpg --import # Then just paste the key and hit the ctrl+d key combo on your keyboard Step 2: Open an edit shell for the newly imported key:\ngpg --edit-key 0x12345678 Replace 0x12345678 with the key id of the imported key from step 1. You can list all key id\u0026rsquo;s with: gpg -k --keyid-format 0xshort.\nStep 2.1: Trust the key:\ngpg\u0026gt; trust # Please decide how far you trust this user to correctly verify other users\u0026#39; keys # (by looking at passports, checking fingerprints from different sources, etc.) # # 1 = I don\u0026#39;t know or won\u0026#39;t say # 2 = I do NOT trust # 3 = I trust marginally # 4 = I trust fully # 5 = I trust ultimately # m = back to the main menu # Your decision? 3 Feel free to make a different decision based on your own preference.\nWarning\nEnsure you know that is meant by trust. You don\u0026rsquo;t decide how far you trust the owner of the key in general. You decide how far you trust the owner to correctly verify the keys of other users.\nStep 2.2: Sign the key with your own key using the lsign or sign command. The following example uses the sign command:\ngpg\u0026gt; sign Really sign? (y/N) y Info\nThe lsign (local sign) command will only keep the generated signature locally. The signature will never be exported or uploaded to a key server. This is handy for when you want to communicate with someone, but do not want to vouch for them in public.\nStep 2.3: Use the save command to save the made changes and close the shell.\nStep 3 (optionally): Share your key signature with the user of the imported key:\ngpg --armor --output public.asc --export 0x12345678 Replace 0x12345678 with the key id of the imported key from step 1. The exported key will include your signature. The owner of the key can then import the updated key in their own keyring.\nInfo\nThe process of transferring, importing and exporting key files can be quite the hassle. You can simplify the process by using a key server. I will explain how to use such a key server in a later section in this blog post.\nUsing your key to sign stuff You can use your key to sign a piece of text or file. Signing provides integrity and nonrepudiation. Any change to the singed content will invalidate the signature. You create the signature with your private key and other people can verify your signatures by using your public key.\nSign and verify a piece of plaintext You can sign a piece of plaintext by following these steps:\nStep 1: Open a terminal or Powershell window and run the following command:\ngpg --armor --clear-sign Step 2: Type or paste your message in the terminal window.\nStep 3: Press ctrl+d to signal GPG that you are done with your message.\nInfo\nThe clear sign option keeps the signed message readable. This allows people to read your message without needing to go through the verification process. Using the sign option will embed the message in the GPG block. Go and see the difference for yourself! Follow the steps again, but replace --clear-sign with --sign.\nYou can verify a piece of text in a similar way. Just replace the command given in Step 1 with:\ngpg --verify Warning\nIf you created a signed message with the --sign option and want verify and read the contents of the message, you will need to use the --decrypt option instead of the --verify option.\nSign and verify a file Signing a file goes a bit differently.\nStep 1: Assuming the file is in the current working directory and is called \u0026lsquo;foo.pdf\u0026rsquo;:\ngpg --armor --detach-sign foo.pdf This will create a file called \u0026lsquo;foo.pdf.asc\u0026rsquo; in the same directory. GPG will save the signature in a binary format if you leave out the --armor option. The signature file will then have the \u0026lsquo;.sig\u0026rsquo; extension instead.\nInfo\nGPG saves application output in a binary format by default. The --armor option will order GPG to save the output in a text format instead. Text is easier to work with since it can be placed almost everywhere. You can paste it into an e-mail or a Teams message, host it on a web-site or even print it on a piece of paper if you want to. My recommendation is to use the armor option by default and only leave it out when encrypting files since they can be quite large. Output files created with the armor option enabled will have a \u0026lsquo;.asc\u0026rsquo; extension. Binary files will have the \u0026lsquo;.gpg\u0026rsquo; or \u0026lsquo;. sig\u0026rsquo; extensions.\nStep 2: Verify the file with:\ngpg --verify foo.pdf.asc foo.pdf Info\nUsing the --detach-sign option will cause GPG to save the signature in its own file. This the preferred way of doing it because it keeps the singed file in a readable format. You can also choose to embed the signed file in the signature by using the --sign option instead. And just like with the plaintext singing, you will need to use the --decrypt instead of the --verify option to verify and read the embedded file.\nEncrypting stuff for others Apart from singing text and files, you can also encrypt text and files for others. This functionality ensures confidentiality by making your message only readable for the intended recipients of the message. Ensure you have imported and created trust relationships with the public keys of the recipients of your encrypted message. It is also best practice to sign your encrypted messages, so the recipients can verify that the message came from you.\nSign and encrypt a piece of text The following steps explain how to sign and encrypt a piece of plaintext.\nStep 1: Open a terminal or Powershell window and run the following command:\ngpg --armor --encrypt --sign Step 2: The application will ask you to add the recipients for your message. You can just add them by typing their name or e-mail address. Don\u0026rsquo;t forget to also add yourself if you also want to be able to decrypt the message.\nStep 3: Type or paste your message.\nStep 4: Press ctrl+d to signal GPG that you are done.\nYou can decrypt the piece of text in a similar way:\nStep 1: Open a terminal or Powershell window and run the following command:\ngpg --decrypt Step 2: Paste the encrypted message in the terminal.\nStep 3: Press the ctrl+d key combination.\nSign and encrypt a file The following steps explain how to sign and encrypt a file.\nStep 1: Assuming the file is in the current working directory and is called \u0026lsquo;foo.pdf\u0026rsquo;:\ngpg --encrypt --sign foo.pdf Step 2: Add the appropriate recipients. You can just add them by typing their name or e-mail address. Don\u0026rsquo;t forget to also add yourself if you also want to be able to decrypt the file.\nGPG will save the encrypted file as \u0026lsquo;foo.pdf.gpg\u0026rsquo; in the working directory.\nYou can decrypt the file as follows:\ngpg --decrypt foo.pdf.gpg \u0026gt; foo.pdf The decrypted version of the file will be saved as \u0026lsquo;foo.pdf\u0026rsquo; in the current working directory.\nUsing a GUI Not a command line warrior? No problem! There are different GUI\u0026rsquo;s you can use to manage keys and handle signing, verification, encryption and decryption operations. A GUI called \u0026lsquo;Kleopatra\u0026rsquo; already ships with the Windows version of GnuPG. Look for its shortcut on your desktop. On Linux systems, you will have to install the \u0026lsquo;kleopatra\u0026rsquo; package to get the GUI. GNOME users might want to use the Seahorse GUI instead, since it better blends in with the desktop environment.\nOn macOS you can install GPG Suite if you want a GUI:\nbrew install --cask gpg-suite Warning\nGPG Suite also comes with a plugin for Apple Mail. The plugin comes with a 30 day free trail and will cost you around € 25 afterwards. You can install the \u0026lsquo;gpg-suite-no-mail\u0026rsquo; package instead of the \u0026lsquo;gpg-suite\u0026rsquo; package if you don\u0026rsquo;t want the plugin. More on mail client plugins in the next section.\nUsing a mail client plugin Although a bit barbaric, you can just paste the encrypted message in the message body of an e-mail and send it to the intended recipients. Some save the message in a file and add this file as an attachment. This way of working can become quite cumbersome when you have to send a lot of encrypted e-mail and each e-mail has multiple replies you have to read. Luckily there are ways to make your mail client do the heavy lifting. Popular mail clients for Linux systems, such as KMail and Evolution, have builtin support for PGP. Other mail clients will require the installation of a plugin. Here is a list of possible options:\nKMail Builtin support Only available for Linux systems Evolution Builtin support Only available for Linux systems Thunderbird Builtin support since version 78 Available for Windows, macOS and Linux Apple Mail Needs GPG Suite plugin Only available for macOS systems Microsoft Outlook Needs GpgOL plugin, which ships with GnuPG for Windows (so it should be installed already) Available for Windows and macOS systems, but the plugin only works in the Windows version If you prefer a web-interface, you can take a look at Mailvelope. Proton Mail and Tutanota are also good choices if you don\u0026rsquo;t mind registering a new e-mail address.\nWarning\nLetting your mail client handle the encryption process instead of manually pasting it in the e-mail exposes you to some possible risks you should be aware of:\nA plaintext version of the message might be send on accident, because of a bug in the mail application or plugin The mail application or plugin might not encrypt the concept message. Parts of the message are then leaked to the mail server Modern mail applications use HTML for message composition. These messages have a predictable structure, making them more susceptible to Known Plaintext attacks. Some mail applications allow you to switch to a text format when composing a message Using a key server As described earlier: The process of transferring, importing and exporting key files can be quite the hassle. A key server can make things easier. A key server can be seen as a public repository of keys. You can send your own public key to it and receive the public keys of others. You simply need to know their key ID or e-mail address. I am going to use the key server \u0026lsquo;keys.openpgp.org\u0026rsquo; in the following steps.\nStep 1: Export your public key with the usual command: gpg --armor --output public.asc --export 0xFC1B1408. Be sure to replace 0xFC1B1408 with the ID of your own key.\nStep 2: Upload your key using the webform.\nStep 3: Confirm your e-mail address.\nStep 4: Configure \u0026lsquo;keys.openpgp.org\u0026rsquo; as your default key server by adding the following line to your \u0026lsquo;gpg.conf\u0026rsquo; file:\nkeyserver hkps://keys.openpgp.org The \u0026lsquo;gpg.conf\u0026rsquo; file can be found in the ~/.gnupg directory on Linux and macOS systems. On Windows it can be found under %APPDATA%\\gnupg.\nYou can now receive keys in the following way:\n# Receive by e-mail address gpg --auto-key-locate keyserver --locate-keys john.doe@example.com # Receive by short ID gpg --recv-key 0xFC1B1408 # Receive by long ID gpg --recv-key 26B6896326F977B6FA0DBE4B1D047E24FC1B1408 Warning\nThe most reliable way to receive someone\u0026rsquo;s key is by using the long ID. You can use the short ID if the long one is too much typing work. Retrieving a key based on e-mail address can be tricky. Not all key servers verify the e-mail address that is used with the key.\nStoring your key on a YubiKey Your private key is stored on your systems internal storage by default. This can create problems when a hacker manages to get access to your system. The hacker can steal your private key file which can used to decrypt your messages and sign things in your name. Protecting your private key with a password does help, but a password can just as easily be captured by using a keylogger. The best way to protect your key is to store on a separate hardware device. A YubiKey is a specialized hardware device which can be used to store different types of key material.\nWarning\nEnsure you have generated your keys on a system that you know is not already compromised. You might want to boot into Tails and use it to generate the private key and move the key material to the YubiKey. Don\u0026rsquo;t forget to make a backup of your private key! You can optionally use the persistent storage feature of Tails to store the backup.\nThe following steps will explain how to move your private key to a YubiKey device:\nStep 1: Buy the key on the website of the manufacturer. You will need a 5 series key.\nStep 2 (optional): Download and install the YubiKey Manager software. There are different ways to do this. You will have 2 options:\nOption 1: Install the platform independent command line Python package. This will require you to install Python and will only give you the command line tool:\n# Install Python3 apt-get install python3 python3-pip # Ubuntu/Debian dnf install python3 python3-pip # Fedora choco install python3 # Windows brew install python3 # macOS # Install Yubikey tools pip3 install --user yubikey-manager Option 2: Download and install the Yubikey Manager software from the Yubico website. This will give you the GUI and command line tool.\nStep 3: Connect the YubiKey to your system.\nStep 4 (optional): Verify that the Yubikey is properly recognized on your system. Use the YubiKey Manager GUI or the ykman list command.\nWarning\nThe \u0026lsquo;ykman\u0026rsquo; application should be in your path when you installed the Python version. Look for it in the installation directory if you downloaded the installer from the Yubico website. On macOS it should be in \u0026lsquo;/Applications/YubiKey Manager.app/Contents/MacOS\u0026rsquo;. On Windows it should be in \u0026lsquo;C:\\Program Files\\Yubico\\YubiKey Manager\u0026rsquo; (look for the \u0026lsquo;ykman.exe\u0026rsquo; file).\nStep 5: Verify that the YubiKey is recognized by GnuPG by running gpg --card-status in a Terminal or Powershell window.\nWarning\nYou might run into a situation where the YubiKey is recognized by the YubiKey Management software, but it won\u0026rsquo;t show up in GnuPG. I personally had no problems on Windows, Ubuntu and Fedora but did stumble into this problem on macOS.\nHere is how I fixed it:\nStep 1: Add the following line to your \u0026lsquo;scdaemon.conf\u0026rsquo; file:\nreader-port Yubico Yubikey The \u0026lsquo;scdaemon.conf\u0026rsquo; file should be in the same directory as your \u0026lsquo;gpg.conf\u0026rsquo; file. You might need to create it if it does not exist.\nStep 2: Restart the scdaemon service with gpgconf --reload scdaemon.\nStep 3: The YubiKey should now show up when running the gpg --card-status command.\nStep 6: Prepare the YubiKey for use. The following code block will show you how to do this:\ngpg --card-edit # Should drop you in a gpg shell gpg/card\u0026gt; admin # Unlock admin commands gpg/card\u0026gt; kdf-setup # Extra hardening: Save PIN\u0026#39;s as hash instead of plaintext gpg/card\u0026gt; passwd Your selection? 3 # Set an Admin PIN. The default is: \u0026#39;12345678\u0026#39; Your selection? 1 # Set an User PIN. The default is: \u0026#39;123456\u0026#39; Your selection? Q gpg/card\u0026gt; name # Set your name here gpg/card\u0026gt; lang # Configure your preferred language gpg/card\u0026gt; quit The Admin PIN will allow you to administer the device while the User PIN allows you use the device. You will need the Admin PIN to do things like adding or deleting key material while you will use the User PIN for day-to-day tasks.\nInfo\nThe passwd selection menu also allow you to set a Reset PIN. A Reset PIN allows a user to reset their own PIN without needing access to the Admin PIN. The reset PIN is disabled by default. You can leave it disabled if the user and the admin are the same person.\nStep 7 (optional): Configure maximum failed PIN attempts. By default the User and Admin PIN\u0026rsquo;s will be locked after 3 failed attempts. You can change these values with the YubiKey Manager command line tool:\nykman openpgp access set-retries 5 2 3 The command above will:\nSet the maximum retry attempts for the User PIN to 5 Set the maximum retry attempts for the Reset PIN to 2 Set the maximum retry attempts for the Admin PIN to 3 Feel free to change these values to suit your own preferences.\nStep 8 (optional): Configure require touch. This will require you to touch the key for every GPG operation:\nykman opengpg keys set-touch aut cached ykman opengpg keys set-touch sig cached ykman opengpg keys set-touch enc cached The commands above will configure the Key to require touch for authentication, signing and encryption operations. The action will be remembered for 15 seconds. This ensures the YubiKey will play nice with things like mail client plugins. You might want to set the value to \u0026lsquo;off\u0026rsquo; for \u0026lsquo;aut\u0026rsquo; if you use things like Ansible. Unless you like touching the YubiKey every 15 seconds during a run, its your party.\nStep 9: Move your master and sub keys to the card. The following code block will show you how to do this:\ngpg --edit-key 0xFC1B1408 gpg\u0026gt; keytocard # Move the master key. Set it as the Signature key gpg\u0026gt; key 1 # Select encryption subkey gpg\u0026gt; keytocard # Move the encryption subkey gpg\u0026gt; key 1 # Deselect encryption subkey gpg\u0026gt; key 2 # Select authentication key. You can skip this step if you don\u0026#39;t have one gpg\u0026gt; keytocard # Move the authentication subkey. You can skip this step if you don\u0026#39;t have one gpg\u0026gt; save Replace 0xFC1B1408 with the key ID of your own key.\nStep 10: Verify everything is OK. Your key information should now be listed at the bottom when running gpg --card-status.\nStep 11: Try to sign a file or a piece of plaintext. You should get a prompt asking you for your User PIN.\nInfo\nThese steps are based on the steps described in the YubiKey Guide. Check out this guide if you need more detailed information. It also describes things like key rotation. Just be aware that this guide has a different key setup than we have created here. We use the master key to certify other keys and create digital signatures. The YubiKey Guide uses the master key for certification only and uses a separate subkey for singing.\nWarning\nIt\u0026rsquo;s important to know that YubiKeys won\u0026rsquo;t prevent hackers from using your private keys, it does prevent them from stealing the keys. A hacker can simply wait for you to plugin and unlock your YubiKey and then start to decrypt and sign stuff, but the hacker will loose access once the YubiKey is pulled from the machine.\nClosing words As you can see from the instructions above, properly setting up mail encryption can be a strait up nightmare for non-technical people. I wouldn\u0026rsquo;t dare to ask my grandparents nor my parents to set this up. I think this is also the main reason why end-to-end mail encryption will never become mainstream. And this is a problem since new privacy regulations in the EU disallow companies from sending personal information in the clear. This forces companies to limit communications over e-mail. Some have even decided to stop communicating over it altogether.\nAbout a month ago, I wanted to end an insurance contract. I send an e-mail to the insurance company and got an automated reply back instantly. The reply stated that the company had stopped all customer communications over e-mail. I ended up canceling my contract through WhatsApp. Each business ends up with its own solution to the problem. They request you start a chat session on their website or message them through certain chat clients.\nI have also seen some creative solutions. One company had sent me some personal information which was saved in an encrypted PDF attachment, but the password was my zip code, which could be easily bute-forced or obtained with some OSINT work. \u0026ldquo;The law says we must encrypt all personal information, but nobody said anything about using strong passwords\u0026rdquo; they must have thought. It made me chuckle a bit.\nThis whole situation saddens me. With e-mail, you have the possibility to freely select your e-mail provider and your e-mail application. You can even become your own provider by setting up a mail server yourself. Most chat platforms don\u0026rsquo;t give you this kind of freedom. You are forced to use the applications provided by the platform owner and are also forced to send all communications through their systems. This is all fine then the platform is still in the public\u0026rsquo;s good graces, but things get difficult when it comes into dispute and users want to leave.\nMany experienced this when Facebook took over WhatsApp. People wanted to leave and fled to Signal, but many remained on WhatsApp. All my colleagues and geek friends moved to Signal, while all my family and non-geek friends stayed on WhatsApp. I ended up with both applications installed on my phone. I will be talking more about chat platforms in the next blog post since it will be about this very subject.\n","permalink":"https://www.vharmers.com/posts/opsec_mail/","summary":"\u003cp\u003e\u003cem\u003eThis post is part of a larger series. You can find all posts over \u003ca href=\"https://www.vharmers.com/categories/opsec-series/\"\u003ehere\u003c/a\u003e\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWelcome to the second blog post in this blogging series. I recommend reading the introduction post before starting with this one. Email is one of the oldest ways to communicate on the world wide web. And since the internet was created with openness in mind, so it shouldn\u0026rsquo;t come as a surprise that e-mail wasn\u0026rsquo;t designed to be very secure. Sending an e-mail is like sending a postcard. Every party involved in the delivery process can read the contents of the message. From the people working in the distribution centers to the mailman who delivers the card to your door.\u003c/p\u003e","title":"The OpSec blog series - E-mail encryption"},{"content":"Over the span of our lives, we accumulate a lot of stuff. Some of this stuff is precious to us so we keep it in a secure place like a safe or strongbox. Some of this precious stuff can also be digital and therefore must be secured into digital strongboxes and safes but what happens when you lose the key?\nWhen your work in IT, you have a minimum of two employers: the company you work for and your family. I am the designated IT support and data custodian at home. It’s my job to keep all family pictures and other important files complete and available. And after going through the experience of losing my pictures of our vacation trip to Paris years ago, I am next to paranoid when it comes to making backups.\nI have around 8 copies of all important data. I keep backups on laptops, external drives and 3 different cloud storage providers, but there is one little problem: it’s all encrypted. My greatest fear, apart from being randomly attacked by apes, is that I somehow lose access to the encryption keys.\nLike a good boy, I store all my passwords in a password manager, but what if I forget the master password? You know that thing when you type a password so often it becomes muscle memory but then you forget the actual password? And then you can’t type it anymore when you realize that you forgot it? Truly the stuff of nightmares.\nAnd how will my family be able to access the data if something happens to me? I could easily be abducted by aliens, isekaied to another world or ascend to another plane of existence by accident.\nI therefore came up with a system that allows me or my family members to access my password database in case of emergency. And no it doesn’t involve just giving my parents a written copy of my master password because that would be too easy.\nThe first step would be to collect copies of all the necessary files you want to put in your “digital life raft”. Put them all in one folder.\nThen we use an application such as 7-Zip to create a password protected archive from the folder. Windows users can download the installer from the 7-Zip website. MacOS users can use Keka instead. You are free to use something else if you want.\nNow it’s time to add the magic sauce. We are going to split the archive password into multiple parts using Shamir’s Secret Sharing (SSS). The idea behind SSS is that you can split a given secret into an X amount of shares. Reconstructing the secret requires an Y amount of those shares (where Y \u0026lt;= X of course).\nYou can use the following website to split your password into parts and combine those parts to reconstruct the password. You can save the page as an HTML file to your computer if you want to use it offline.\nIt is recommended to build the page from source. You will need Git and Python3 installed on your system. These are the steps you need to take:\ngit clone https://github.com/iancoleman/shamir.git/ cd shamir python3 ./compile.py Then you can open the file called shamir-standalone.html with your browser. There is also an older alternative called PassGuardian you can take a look at.\nBoth of these websites use the secrets.js Javascript library, which is an implementation of SSS. The library has been audited in 2019. You can read the audit report over here if it makes you feel better.\nInfo\nThere is also a command line implementation for Unix/Linux systems. On Debian, you can install it with the following command apt-get install ssss. It is also available for macOS through Homebrew. You can install it with brew install ssss. Use the ssss-split and ssss-combine commands to create and combine the shares.\nOnce you have created the shares and distributed them to your family members and trusted friends, you still have to store your archive somewhere safe. I would recommend you store it on a read-only medium. Don’t use USB sticks since the data on them can easily get corrupted or deleted by accident. Burn the archive to a CD or store it on an SD card (don’t forget to put it in read-only mode by flipping the switch on the side).\nIt’s also not a bad idea to include a copy of the needed software and instructions. You can get a portable version of 7-Zip over here.\n","permalink":"https://www.vharmers.com/posts/life_raft/","summary":"\u003cp\u003eOver the span of our lives, we accumulate a lot of stuff. Some of this stuff is precious to us so we keep it in a secure place like a safe or strongbox. Some of this precious stuff can also be digital and therefore must be secured into digital strongboxes and safes but what happens when you lose the key?\u003c/p\u003e\n\u003cp\u003eWhen your work in IT, you have a minimum of two employers: the company you work for and your family. I am the designated IT support and data custodian at home. It’s my job to keep all family pictures and other important files complete and available. And after going through the experience of losing my pictures of our vacation trip to Paris years ago, I am next to paranoid when it comes to making backups.\u003c/p\u003e","title":"Creating a digital life raft"},{"content":"Have you ever had the desire to improve the security of your systems but had no idea how to do it? You might have read all kinds of articles on the web about hacked companies that needed to pay large sums of money to get access to their data again. But what can you do, when you are just a system administrator of a small company with a non-existent security budget? Well, you can start reading the OpSec blog series in order to acquire the knowledge you need to make your environment more secure and give hackers a hard time.\nMy name is Valentijn Harmers and I have been working for Fox-IT/NCC Group as a DevOps Engineer for about 5 years now. Working at Fox has been a special experience. After finishing my Bachelors degree, I wanted to do something with software development, Linux and IT security. I went looking for a job but had a difficult time finding a job that had all 3 elements, but I was a greedy man and was committed to finding the perfect job for me. My job-seeking journey ended at Fox, where they were willing to start me off as a DevOps Engineer for the Threat Intelligence department.\nI have done many different tasks over the years, but am currently specializing in cloud infrastructure and security. There is no particular grand idea behind this move. I just didn\u0026rsquo;t like data-center visits, so moving my attention to the cloud made sense. I have always been interested in learning from others and have in turn been more than willing to share my own knowledge and experience. The OpSec blog series gives me the opportunity to share knowledge and experience among a larger audience.\nSo far the personal introduction. Let\u0026rsquo;s get back on topic and discuss what this blogging series will look like. I will start off by explaining some general theoretical knowledge in order to lay down a foundation. I can then build the rest of the blog posts on top of it. Each post will cover a particular topic like chat communication, drive encryption or authentication. Large topics can be stretched over multiple blog posts. Each post would preferably contain a theoretical and a practical part.\nI haven\u0026rsquo;t decided on a definitive topic list yet, but I have the following topics in mind:\nCommunication - PGP and SSL/TLS Communication - Secure chat applications Disk encryption Authentication - 2FA and MFA Authentication - Secrets Management Authentication - Going passwordless Infrastructure as Code - Ansible Infrastructure as Code - Git Asset/Vulnerability management I think its also a good plan to set a scope for this blog series:\nWe don\u0026rsquo;t want the posts to be too difficult to follow. You should be fine if you can open up a command terminal or Powershell prompt and have some basic networking knowledge The posts will focus on small companies and individuals. All the introduced applications are free of charge and easy to set up, but might not scale well in enterprise environments I will write instructions for Microsoft Windows, Mac OS, Ubuntu and Fedora operating systems Info\nThese info blocks contain extra information which you are not required to know in order to understand the rest of the post. Feel free to skip them if you hate reading.\nWarning\nI will use these warning blocks to warn you of potential adverse consequences.\nWhat is IT Security? Let\u0026rsquo;s talk about what IT Security actually is, or more how I see it. IT Security consists of two parts: Information Technology (IT) and Security. IT is all about technology, processes and people. Security is all about confidentiality, integrity and availability, which is also known as the CIA triad. Let\u0026rsquo;s take some time to explain both of these terms.\nSome sleazy salesman might have tried to convince you otherwise, but there is no magic software solution that will fix all of your problems and protect you from evil hackers. This is because every solution you deploy will need to be managed by people. And those people will need to have a process to follow in order to maintain the solution and respond to events in a uniform manner. You will need all three elements to be effective.\nPeople who have followed any security certification such as (ISC)² CISSP, (ISC)² SSCP or CompTIA Security+ will know about the CIA triad. It is one of the first things they introduce you to. Confidentiality is about only sharing data with those who are allowed to have access to it. Integrity is about ensuring data is complete and accurate. And Availability is about ensuring data is accessible to those who need it in a timely fashion.\nThose who have obtained the Systems Security Certified Practitioner (SSCP) certification will also be acquainted with the CIANA acronym. CIANA is CIA + Nonrepudiation and Authentication. Nonrepudiation prevents people from being able to deny something they have said. The easiest example of this is the use of signatures.\nWhen you make a promise to someone, this promise can be written down in the form of a contract. Your signature on this contract proves that you know about the promise and are committed to keeping it. You cannot, later on, deny that you never knew about it and can be held accountable if you break the terms of the contract.\nAuthentication is the process of verifying that someone is who they claim to be. You take on an identity and supply proof that you are who you say you are. The identity is generally a username and the proof is a password, but there are also all kinds of other proofs you can use such as an OTP code or a fingerprint. Even things like body weight can be used as a proof. Authentication is something of great importance. Most breaches of security happen because of compromised credentials. Attackers find a way to login on a privileged account and take things from there.\nThis might be a lot of information to take in at once if you are new to the IT Security field. But just remember: IT Security is all about ensuring Confidentiality, Integrity, Availability, Nonrepudiation and Authentication (CIANA) and this is all achieved by Technology, Processes and People (TPP). There is also a longer version of CIANA which is CIANAPS where the P and S stand for Privacy and Safety, but I will leave it at CIANA for now. I can recommend the SSCP CBK (second edition) written by Mike Wills if you are interested in knowing more about CIANA and its practical application in IT Security.\nWhy would you need IT Security? Now we know what IT Security is, it\u0026rsquo;s time to discuss why you would need it and how it contributes to the success of a company or your own private life. And to explain this one, I need to go back in the past. You see, went I was still a kid, I played a strategy game called \u0026ldquo;Stronghold\u0026rdquo;. The game would give you a piece of land to build your hold on. You would start off with a \u0026rsquo;lord\u0026rsquo;s keep\u0026rsquo; and some resources such as wood, stone and food to get you started.\nThe goal of the game was to develop your economy and reach a certain goal such as \u0026ldquo;deliver 400 pieces of bread before the end of the year\u0026rdquo;, but the game wouldn\u0026rsquo;t make it easy for you. Enemy soldiers would periodically invade your land and try to destroy everything you have built. You could resist these attacks by building fortifications and recruiting soldiers, but this required resources produced by your economy. You needed stone or wood to create walls and you needed weapons and villagers to create troops. Economy and security were highly dependent on one another.\nAnd the enemy soldiers weren\u0026rsquo;t the only thing you had to worry about. There were also natural disasters such as famine and disease you had to deal with. Grain crops would fail, impacting your bread production or your cows would become sick preventing the production of cheese. Each one of these problems had the possibility of causing a chain reaction. A shortage of food made unhappy villagers. Unhappy villagers would eventually leave to find a better future elsewhere. Leaving villagers would lead to understaffing, which would cause parts of the production process to stop functioning, continuing the spiral of decline.\nThis game taught me a lot. Went I started out, I desperately tried to build a wall around all of my buildings. I didn\u0026rsquo;t want to lose anything but ended up losing everything. The construction costs for the wall were too high and in situations where I actually managed to build it, I didn\u0026rsquo;t have enough archers to defend all of it, leading to gaps in my defenses. I learned to layer my defenses. I would build a stone wall around my most important buildings and used a combination of wooden walls and watchtowers for the other buildings.\nI would lose some farms and hunter shacks with every attack, but those were easily rebuilt. I would always keep some resources and jobless villagers on hand to compensate for these losses. At this point you might be thinking: \u0026ldquo;I thought this guy would explain why I needed IT Security, but all he does is talk about some game he played when he was a kid\u0026rdquo;. You will need to read between the lines for this one. Replace the buildings with assets (such as servers, databases and printers), villagers with employees and soldiers with SOC analysts, security officers and security engineers and you have a company. A stone wall becomes a firewall and a watchtower becomes an Intrusion Detection System (IDS).\nThis game taught me that there is a delicate balance between acquiring new things and protecting what you already have. As long as you have something of value, there will be others who will want to take it away from you. And the easier you make it, the more tempted they will be to act on their desires. This doesn\u0026rsquo;t mean you should be paranoid about security. You just need enough of it to not make it worth their while. You will need to ask yourself the question: \u0026ldquo;What am I or is my company worth?\u0026rdquo;. And when answering this question, it is important to not only look at tangible things like laptops, servers and paper records but also at intangible assets like trade secrets.\nWhen you know what you are worth, you can start protecting the things that are yours. You will have to make tough decisions on where to focus your defense. Ideally, you want to protect everything, but like in Stronghold, this is just not feasible. This doesn\u0026rsquo;t mean you just \u0026ldquo;let it be\u0026rdquo;. You should make plans about what to do if one of these assets is lost to you.\nIT Security can be hard. You are trying to create a stable environment in a chaotic world. You feel like a shock absorber in a car. You take the pummeling from the outside world so the rest of the company can do what they do best. And the better the shock absorber functions, the smoother the ride will be.\nSystem setup It is time to do something practical. We will install a package manager on our system. A package manager is an application that can be used to install, update and remove other applications (revered to as packages). Using a package manager over manually installing every application has several advantages:\nThe applications are downloaded from a trusted source It\u0026rsquo;s easy to keep all applications updated with the latest (security) patches It\u0026rsquo;s quicker. I can install the Firefox web browser, GIMP and Libre Office on a Windows system with just one command: choco install firefox gimp libreoffice Below you will see installation instructions for the different operating systems.\nMicrosoft Windows For Windows we are going to install the Chocolatey package manager.\nStep 1: Open up an administrative Powershell window\nStep 2: Run the following command in the window:\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System. Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString (\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) Step 3: Ensure the application was installed successfully by running: choco -?\nmacOS For MacOS we are going to install the Homebrew package manager.\nStep 1: Open up a Terminal window\nStep 2: Run the following command in the window:\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; Step 3: Ensure the application was installed successfully by running: brew --help\nStep 4 (optional): Disable telemetry by running the following command: brew analytics off\nUbuntu/Fedora Ubuntu and Fedora already have package managers of their own. There is no need to install anything for now.\nClosing remarks This will be all for today. Take your time to process all the information I have given you. Don\u0026rsquo;t forget to relax once in a while. Maybe play a game to take your mind off things. I will see you in the next post.\nContacting the author Do you have any questions, feedback or remarks after reading this post? Feel free to contact me. You can find my contact info on the home page of this blog.\nWarning\nI am quite strict on who I add as a connection on Linkedin. I prefer to not accept connection requests from strangers. You are always free to shoot me a message though.\n","permalink":"https://www.vharmers.com/posts/opsec_intro/","summary":"\u003cp\u003eHave you ever had the desire to improve the security of your systems but had no idea how to do it? You might have read all kinds of articles on the web about hacked companies that needed to pay large sums of money to get access to their data again. But what can you do, when you are just a system administrator of a small company with a non-existent security budget? Well, you can start reading the OpSec blog series in order to acquire the knowledge you need to make your environment more secure and give hackers a hard time.\u003c/p\u003e","title":"The OpSec blog series - Introduction"},{"content":"As someone who works in the IT sector and does all kinds of tech stuff in his free time, having a proper working environment is of the utmost importance.\nThe term “Working environment” is a broad term with can be anything from the people you work with to the desk you sit at, but I am focusing on the thing I spend my time looking at for most of the day.\nIt’s the screen of my computer or more specifically: the graphical environment rendered by the operating system on my monitor. This environment means a lot to me.\nIt allows me to keep up with the latest news and communicate with friends, colleagues and family. It gives me access to more knowledge than I can ever consume in a lifetime.\nIt also allows me to do my work remotely. I can live with my parents in the countryside instead of being forced to rent an expensive apartment in the city.\nIt fascinates me how my choice of working environment has changed over the years and how my worldview and way of thinking changed with it.\nThe early days The first computer I got my hands on was my dad’s. He had bought a new desktop system and he allowed me to use it from time to time. I can’t remember the specs since I was very young at the time.\nIt was one of those classical white-colored desktops with a small monitor and a noisy keyboard. It ran the Windows 95 Operating System and I thought it was amazing.\nBut we didn’t have internet back then, so apart from some games, there was nothing on it. It didn’t take long for me to get bored with the games and I started poking around in the system.\nI started looking in system directories and playing with system settings. My dad wasn’t happy with my little adventures. I can’t remember how many times he had to move the system back to a previous restore point in order to undo my changes.\nI got my own system much later. My dad had bought a new laptop and I was allowed to have the Windows XP desktop system we both shared at the time. The desktop was moved from the attic to my own bedroom.\nI was very excited to be having my own computer, but immediately stumbled into the first hurdle: The thing was running on snail power. The system had an Intel Pentium processor and a whopping 512 MegaBytes of memory.\nI also had a cheap wireless network receiver which would only work half of the time. Combine this with a modem which needed to be restarted once a week at best and once a day at worst.\nThe system took forever to boot up and web pages took ages to load. And this was at a time when Windows Vista was just released. Web sites became more complex and required more and more resources to load.\nI did everything in my power to speed up my system. I disabled unnecessary services (and even some necessary ones because I obviously didn’t know what I was doing), removed unnecessary software, used the lightest virus scanner I could find (it was Panda Antivirus I believe) and even configured the system to use a USB stick to store virtual memory (in Vista it was called ReadyBoost, but XP already had something similar).\nNone of it had a noticeable impact, but it did teach me how the Windows operating system worked. This time had thought me two valuable lessons:\nBeing bored from time to time is healthy, especially at a young age. It sparkles the curiosity Having limits motivates you to overcome those limits. I wouldn’t have known so much about the Windows OS if I hadn’t had a slow system My studying days I ended up studying Information Technologies (IT) at the local university in my town. This wasn’t however my first choice. I always wanted to become a police officer, but didn’t pass the fitness test.\nIn hindsight, I think it was for the best. I was in love with the idea of being a police officer and chasing bad guys, but didn’t have the right personality traits for it. I am too much of a thinker and not much of a do’er.\nApart from learning how to code (I was pretty much addicted to it), I also was introduced to an OS called GNU/Linux (or Ubuntu to be more specific). After running it in a virtual machine for some time, I felt confident enough to install it on my laptop and made it my daily driver.\nI did a lot of Distro-hopping over the years, but mainly settled with Fedora and OpenSuse. I loved the openness of the system. Windows always felt like an overcomplicated black box, while GNU/Linux felt much more open and the system was easier to understand with its “everything is a file” design.\nI spend many hours exploring the system by looking at configuration files and studying man pages, but this wasn’t always purely for fun. I had a lot of problems with my graphics card.\nI can tell you that you’re not having a good day when you are desperately trying to fix a screen brightness control problem before the screen burns your eyes out.\nThese stability problems eventually made me move away from Linux. The biggest problems I had were graphical issues, such as problems with screen configurations and driver stability. I also had issues with putting the system in suspend mode.\nI heavily relied on those features. I often had to hook up my laptop to a beamer or external screen to give presentations. We also moved from classroom to classroom throughout the day, so having a laptop that could properly go into and come out of suspension was essential.\nI loved the OS, but the setup proved to be too unreliable in the end. I can still clearly remember an incident where my system froze while giving a presentation in front of my class. I was forced to reboot my laptop.\nI can also remember another incident where my system started rebooting because it failed to come out of suspended mode. And it happened just before it was my turn to give another presentation.\nI eventually had enough of it and decided to buy a MacBook Pro. I enjoyed this MacBook since I could run all my favorite Linux tooling on it without having the reliability issues that plague Linux Distros.\nEarly career After finishing my studies, I accepted a job at a CyberSecurity company and had to move from the east of the country to the West. I rented an apartment and it didn’t take long before I was confronted with the negative aspects of living in the city. My precious MacBook had been stolen from my apartment.\nI sadly couldn’t track the laptop since it was encrypted and wouldn’t boot up without the password. The recovery environment was also protected with a password. This however meant that the tacking software never had a chance to report on the location of the device.\nI reported the theft to the police, gave them the footage of my IP camera and filed a claim with the insurance company. My claim was eventually approved and I received money to buy a new laptop. I thought about buying another MacBook, but decided to buy a Dell tablet running Windows 10 (x64 not ARM).\nI did enjoy the MacBook but I also had another Windows laptop I used for gaming and wanted to be able to access all my data on both. This proved to be a challenge since both systems had their own ecosystems and finding something that worked for both of them was difficult.\nApple provides its users with a free office suite, but I couldn’t use it since I couldn’t open those files on my Windows system. I used Bitlocker to encrypt my external hard drives, but macOS couldn’t read those drives. I tried using a software package from a third party to read them from my Mac, but the performance was poor.\nAnd since you can’t use a MacBook as a gaming system, I decided to make the switch back to Windows. I kept a bulky laptop for gaming and a tablet as a daily driver.\nUsing the tablet was fun at the beginning. I could do some coding at my desk and then detach the tablet from its keyboard to watch some Netflix on the couch when I was done. It however didn’t take long for me to notice the drawbacks.\nI initially wanted to use the tablet like an always-on system, mostly relying on the suspend function and rarely shutting it down. I got used to this way of working when I still had my Mac. The ability to just start where you left off yesterday was something I highly appreciated.\nMy Windows environment proved to be too unstable to support this way of working however. Things just stopped working over time. I had times when the tilt sensor wasn’t working anymore or that one time when the touchscreen stopped being a touchscreen and turned into a regular screen.\nRebooting the device fixed all of the issues, but it required me to open up all my applications again. I was quite disappointed about this. I could keep my Mac running for weeks if not months only needing to restart it for updates. It was definitely something I took for granted.\nApart from this issue, there were some smaller issues and to give you an impression, here’s a list:\nThe tablet was positioned at a fixed angle in its keyboard stand. Dell had an additional keyboard available where you could change the angle, but you needed to buy it separately. You couldn’t put it on your lap, since the tablet wasn’t locked into position when in the keyboard. It had this annoying issue where it would periodically reset the brightness to a fixed value (30%). And this was also in the time when Windows 10 didn’t have a brightness slider in the sidebar. You had to tap a button to cycle through the brightness levels. And off course it went from low to high, so you first had to burn your eyes out before coming back at the lower brightness level, only for the system to turn it up again after 5 minutes. I went mad over this issue. I managed to trace the issue back to a custom energy profile Dell had installed in the system. Switching it to the Windows default fixed the issue. The system was not able to detect the storage device after coming out of a suspended state. A normal reboot didn’t help. The Dell BIOS was essentially telling me that it couldn’t find a medium to boot from. After a long period of troubleshooting, I managed to trace the problem back to a feature called Link Power Management (LPM) which was part of the Intel Rapid Storage Technology service. Disabling this feature solved the problem. Windows 10 is equipped with a tablet mode feature. The idea was that the normal layout would be used when the tablet was connected to the keyboard, but would switch to a more touchscreen-friendly layout when disconnected. This didn’t work since Windows seemed to choose a layout at random. I had to manually make the switch by pressing a button in the sidebar. Although this tablet was taking it to the extreme, all the Windows devices (including one Windows Phone) I owned had a multitude of problems. There are just too many parties involved in my opinion.\nYou first have different hardware manufacturers delivering the individual components and drivers. Then you have Microsoft supplying the OS which has to work with a wide range of hardware configurations. And then on top of that, you have the laptop (or desktop) manufacturer who adds their own special sauce to the mix.\nAll these layers of complexity don’t exactly fit on top of each other. Everything is a Windows upgrade away from failing. This reminds me of this issue I was having on my gaming laptop.\nMy laptop has these function keys. Most of these keys are handled by the Windows OS itself. I am talking about keys for adjusting things like the volume or screen brightness, but there was this one key for disabling and enabling the touchpad.\nThen one day it stopped working and I can tell you, nothing is more annoying than touching the touchpad on accident when you try to sneak up on someone in an FPS game.\nAfter looking into the issue I discovered that a certain “Control Center” application handled this functionality. The application was used to configure fan speeds but had this as an additional job. It however seemed to be removed during a Windows OS upgrade. Installing the application again returned the lost functionality.\nEverything seems to be tied together with duct tape. The setup held itself together until a change was introduced. And these are also the type of issues that can’t be known beforehand since they only show themselves after months of extended use.\nApart from the state of the device as a whole, the Windows OS also isn’t what it used to be. I personally enjoyed Windows XP and Windows 7 the most. I even have a little love for Windows Vista. The Longhorn theme looked quite fancy. I even preferred it over Windows 7’s Aero theme.\nBut Windows 10 feels like an unfinished product. Like someone started moving features from the old user interface to a new one and decided to call it a day when it was only halfway done. The user experience is just terrible when compared to other Operating Systems.\nI now was a view years into my first job as a DevOps Engineer. This didn’t mean that I actually followed the DevOps practices. I was just a dude who wrote code and kept the servers running.\nWorking in tech involves solving lots of problems. You spend hours debugging code in an effort to find the cause of an annoying bug. And then you also have to be able to switch to your operational role and troubleshoot a server that is acting up all of a sudden.\nThis process drains you psychologically as your mind tries to shift through a list of possible causes or tries to come up with steps that could be taken to narrow down the search area.\nIt is important to give your mind some rest when you come back home from work. I had to learn this the hard way. During the day I spend my time solving problems at work, came home and continued trying to fix my own stuff, sometimes until deep into the night.\nI knew I couldn’t go on like this, but I just couldn’t properly relax until the problem I had was solved. This was especially the case when I was constantly reminded of the problem’s existence.\n“Why spend all the manpower and resources to build something like this when it doesn’t work?” was a thought that often entered my mind when I was scouring the forums looking for a solution late at night.\nThis went on and off for a period of about 2 years before I had enough. I went to the local Amac store (an Apple reseller) and got myself a MacBook Air. I scraped the “everything must work on every system” rule and removed all the unnecessary software from my gaming laptop, leaving only the bare minimum I needed to play games.\nThe present day My little Dell tablet is now safely stored away in one of my desk drawers. I have given it the name of “Loki” for all the mischief it had caused. I still can’t get the suspend functionality to work properly, but that’s okay.\nI think differently about tech these days. In the past, I preferred the products which gave me the most functionality and flexibility. I wanted to get “the most bang for my buck”. Now I just want something reliable and simple to use even if I need to pay a higher price for it or have to accept certain limitations.\nI would like to explain this stance with an example. It will be the last one, I promise. I will start wrapping things up after this one.\nI would like to compare two note-taking applications: Standard Notes and Bear. Let’s start with Standard Notes. The application is supported on a wide variety of platforms including Windows, macOS, Android and iOS.\nThe user can choose from a wide array of editors to take their notes with. There is a plaintext editor, a rich text editor, three markdown editors, a special editor for creating to-do lists and even an editor for creating excel sheets. They even offer cloud file storage and everything is end-to-end encrypted. The functionality of the application can be further extended by the use of plugins.\nBear is only available for macOS, iOS and iPadOS. Notes are created in Markdown and are stored in the user’s iCloud storage. Created notes can be organized by the use of tags.\nAt first sight, you might be thinking that Standard Notes is the clear winner here since it clearly offers the most features. I however ended up switching from Standard Notes to Bear and I will tell you why.\nThe company behind Standard Notes has chosen to make its application available on a wide range of platforms. Creating native applications for each platform requires a lot of investment and comes with a high maintenance cost.\nCompanies therefore look towards cross-platform solutions such as Electron and React Native to get the job done. Aside from having a reputation for being slow and hungry for resources, these solutions don’t blend in with the design language of (all) the platforms they are available for.\nThis also was the case with Standard Notes. Their UI didn’t seem to fit in. The developers of Bear, on the other hand, could just create a native application for macOS, iOS and iPadOS since they wouldn’t support other platforms anyway. The result is a snappy application that blends in well with the Apple design.\nBear only allows you to write your notes in Markdown, white Standard Notes gives you multiple options. But because Bear Notes puts their focus on Markdown editing, they ended up with a high-quality editor which doesn’t hold a candle to the multiple Markdown editors available in Standard Notes.\nThe last thing I wanted to mention is the way both apps sync notes between devices. Standard Notes requires you to create an account with them in order to sync your notes. This means that you will have to create another account, which you will have to manage and secure. You will also need to go through the sign-in process on each of your devices.\nBear doesn’t have this inconvenience. You just download and install the application from the AppStore and your notes will be ready for you when you open the app.\nStandard Notes tries to attract a large customer base by trying to please everyone. This approach however comes at a price. It makes their application feel generic. It doesn’t seem to offer anything special (in my opinion).\nBear takes a different approach. Instead of trying to please everyone, it focuses on a specific target group, which can be defined as “Apple users who like to use Markdown to take notes”. This gives them a smaller group of potential customers but results in a higher quality product.\nThe same can be said for Windows and macOS. Windows has always been a generic OS. It’s used in all kinds different of systems. You can find it on normal consumer laptops, business laptops, gaming desktops, rugged military-style laptops and many more types of systems.\nApple has however chosen to focus on normal consumers with its Air product line and professional business users with its Pro products. This strategy does mean that they miss out on a large group of potential customers, but it allows them to provide their existing customers with products that are more attuned to their needs.\nIt is my personal opinion that specializing offers better long-term prospects than trying to attract an as large customer base as possible by going the “jack off all trades” route.\nOffering a generic product or solution might get you a lot of customers in the short term, but it won’t secure your position in the long term. It is easy for your competitors to come up with a similar product and start eating away at your customer base. It essentially requires you to be the biggest fish out there and this is something you can’t keep up forever.\nI personally think that the Windows Operating System is already done for. Android has already beaten it when it comes down to market share and Microsoft failed to enter the smartphone market with Windows Phone.\nPeople will be less inclined to buy Windows devices since the average Joe can do everything they need with their smartphone. You can even get a full desktop experience, if you have a high-end Samsung device, by making use of Samsung DeX. All you need is a docking station, a monitor, a keyboard and a mouse.\nThe interesting thing is that Windows Phone had a feature called “Continuum” which essentially did the same thing. It allowed you to connect your Windows Phone to a monitor to get a desktop experience.\nI see a future where people will show up at the office, make their way to one of the available flex desks, put their phone in a docking station and start typing away on the keyboard. They would even be able to pull their phone from the docking station and continue working on their phone on the train ride home.\nThe sale of laptops and desktops will keep declining until only a small group of consumers are left. These will be mostly people who need more computing power than a phone can provide.\nAhh yes, I was supposed to tell my present day situation, but I got a bit too carried away. Let’s see, I have been using the MacBook Air for about two and a half years now and I still love it.\nThe device is still as fast and reliable as the day I booted it up for the first time. I haven’t had any problems with it. It’s a 2019 MacBook Air BTW. My employer also assigned me a MacBook Pro around the same time I got the Air and the Pro has been running fine too.\nI was so happy with the experience that I bought an iPhone Pro (which would be replacing my BlackBerry Key 2) and an iPad Pro. And I must say that I have no complaints. Both devices are fast and responsive. The OLED displays are a feast to the eye and most importantly: none of them displayed any buggy behavior or had any problems.\nAnd I think this is something special since every Windows and Android device I had, had at least something that didn’t work as it was supposed to. It is also noticeable that Apple focuses on providing its users with an environment where they can be productive rather than overwhelming them with options and other flashy things.\nThe system is geared towards reliability and simplicity. My two favorite features are the ability to group notifications in a planned overview and the ability to use the iPad as a secondary display for my MacBook by using SideCar. Oh, and I also like how fast and reliable Face-ID works and the password synchronization between devices also saves me a lot of work.\nAnd I know these features sound quite boring. I sound like a dad who is excited about the new minivan he just bought and can’t stop talking about the armrest on the driver’s seat and how he can remove the back row of seats to create more free space.\nBut the thing is that these are the features I use every day. These systems should be boring and dependable, so you can focus on using them to do exciting things.\nClosing words So you made it all the way to the end of this post? I must be an excellent writer or you must be very bored. I didn’t plan on making it this long, but it quickly became the dumping ground for all my frustrations, ideas, opinions and predictions. It has been quite therapeutic. It felt good to write it all down. I hope you learned something too.\nAs a final disclaimer before people start accusing me of being an Apple fanboy and a Windows and Android hater. I don’t care what system you use to get things done. If you are happily using Windows or Android, then I am happy for you too. Use the system that suits your needs best.\nIt also doesn’t mean that I agree with everything Apple does or like all the products and services it provides.\nContacting the author I am always interested in the experiences of others. Maybe you had the same experiences as me or maybe something completely different? I would love to hear your view on this.\nThe easiest way to reach me is through Twitter. My username is @vharmers. I am also reachable on Keybase and on Matrix where my username is @vharmers:matrix.org.\n","permalink":"https://www.vharmers.com/posts/working_env/","summary":"\u003cp\u003eAs someone who works in the IT sector and does all kinds of tech stuff in his free time, having a proper working environment is of the utmost importance.\u003c/p\u003e\n\u003cp\u003eThe term “Working environment” is a broad term with can be anything from the people you work with to the desk you sit at, but I am focusing on the thing I spend my time looking at for most of the day.\u003c/p\u003e","title":"My working environment throughout the years"},{"content":"Typing your password at every system bootup might get you annoyed at times. Especially when you are used to Windows and macOS systems which store the disk decryption password in the TPM.\nBut what if I told you that you can also achieve this on your Linux setup. We can use an application called \u0026lsquo;Clevis\u0026rsquo; to get the job done.\nI will describe the installation and configuration steps for Ubuntu and Fedora, but the steps should be about the same for other Linux distro\u0026rsquo;s.\nInstallation Open up a terminal as root user and run the following command to install the necessary packages.\n# Ubuntu apt install clevis clevis-tpm2 clevis-initramfs clevis-systemd # Fedora dnf install clevis clevis-pin-tpm2 clevis-dracut clevis-systemd Configuration Now we configure clevis to unlock a specific partition for us:\nclevis luks bind -d /dev/sda3 tpm2 \u0026#39;{\u0026#34;pcr_ids\u0026#34;:\u0026#34;7\u0026#34;}\u0026#39; Replace /dev/sda3 with the encrypted partition you want to unlock with clevis. You can list all your partitions with the lsblk command. Repeat the command for every encrypted partition you have.\nNow we just enable Clevis on boot:\nsystemctl enable clevis-luks-askpass.path Thats it. Now it\u0026rsquo;s just a mater of rebooting your system.\nWarning\nIt might take some time before Clevis unlocks the disk. The system might even ask you to input your password. Just be patient!\nWarning\nI had a problem where installing the clevis package didn\u0026rsquo;t trigger an initramfs rebuild. I solved it by simply running a dnf upgrade which would install a newer kernel version and trigger a rebuild.\nYou can also manually rebuild the initramfs by running the following command:\n# Ubuntu update-initramfs # Fedora dracut --regenerate-all ","permalink":"https://www.vharmers.com/posts/clevis/","summary":"\u003cp\u003eTyping your password at every system bootup might get you annoyed at times.\nEspecially when you are used to Windows and macOS systems which store the\ndisk decryption password in the TPM.\u003c/p\u003e\n\u003cp\u003eBut what if I told you that you can also achieve this on your Linux setup.\nWe can use an application called \u0026lsquo;Clevis\u0026rsquo; to get the job done.\u003c/p\u003e\n\u003cp\u003eI will describe the installation and configuration steps for Ubuntu and Fedora,\nbut the steps should be about the same for other Linux distro\u0026rsquo;s.\u003c/p\u003e","title":"Passwordless LUKS setup with Clevis"}]